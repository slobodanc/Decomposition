#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2014
#define MAXFILE_MAXCOMPILER_VERSION_NUM          1
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          41970
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2014-05-20"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "Decomposition"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/Decomposition_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20140522
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(FMEM_SIZE, 1024)
PARAM(CONTAINS_WATCHES, 1)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 74)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "DecompositionKernel1.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "DecompositionKernel2.h"
#endif



#ifdef ENGINE_PARAMETERS
#define ENGINE_PARAMETERS_PRESENT 1
ENGINE_PARAMETERS(DFEModel, DFEMODEL, VECTIS)
ENGINE_PARAMETERS(maxFileName, STRING, "Decomposition")
ENGINE_PARAMETERS(target, ENUM, DFE_SIM)
ENGINE_PARAMETERS(enableMPCX, BOOL, false)
ENGINE_PARAMETERS(MPPRStartCT, INT, 1)
ENGINE_PARAMETERS(MPPREndCT, INT, 1)
ENGINE_PARAMETERS(MPPRThreads, INT, 1)
ENGINE_PARAMETERS(MPPRRetryThreshold, INT, 0)
#endif






#ifdef STREAM_OFFSET_AUTO_LOOP_VAR
#define STREAM_OFFSET_AUTO_LOOP_VAR_PRESENT 1
STREAM_OFFSET_AUTO_LOOP_VAR(DecompositionKernel1, loopLength, 19)
#endif









#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(DecompositionKernel1, Kernel)
MANAGER_NODE(DecompositionKernel2, Kernel)
MANAGER_NODE(input1, PCIe_From_Host_fwd)
MANAGER_NODE(input2, PCIe_From_Host_fwd)
MANAGER_NODE(v, PCIe_From_Host_fwd)
MANAGER_NODE(output1, PCIe_To_Host_fwd)
MANAGER_NODE(output2, PCIe_To_Host_fwd)
MANAGER_NODE(watch_DecompositionKernel1, WatchBlock)
MANAGER_NODE(watch_DecompositionKernel2, WatchBlock)
MANAGER_NODE(Stream_10, DualAspectMux)
MANAGER_NODE(Stream_9, DualAspectMux)
MANAGER_NODE(Stream_8, DualAspectMux)
MANAGER_NODE(Stream_14, DualAspectReg)
MANAGER_NODE(Stream_12, DualAspectReg)
MANAGER_NODE(Stream_56, StreamPullPushAdapter)
MANAGER_NODE(Stream_60, StreamPullPushAdapter)
MANAGER_NODE(Stream_44, Fifo)
MANAGER_NODE(Stream_48, Fifo)
MANAGER_NODE(Stream_52, Fifo)
MANAGER_NODE(Stream_54, Fifo)
MANAGER_NODE(Stream_58, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(DecompositionKernel1, input, IN, STREAM, 64, PULL)
MANAGER_NODE_IO(DecompositionKernel1, v, IN, STREAM, 64, PULL)
MANAGER_NODE_IO(DecompositionKernel1, output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(DecompositionKernel1, internal_watch_input_output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(DecompositionKernel1, internal_watch_i_output, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(DecompositionKernel1, internal_watch_loopcounter_output, OUT, STREAM, 8, PUSH)
MANAGER_NODE_IO(DecompositionKernel1, internal_watch_big_output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(DecompositionKernel1, internal_watch_v_output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(DecompositionKernel2, input, IN, STREAM, 64, PULL)
MANAGER_NODE_IO(DecompositionKernel2, output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(DecompositionKernel2, internal_watch_n_output, OUT, STREAM, 10, PUSH)
MANAGER_NODE_IO(DecompositionKernel2, internal_watch_i_output, OUT, STREAM, 10, PUSH)
MANAGER_NODE_IO(DecompositionKernel2, internal_watch_j_output, OUT, STREAM, 10, PUSH)
MANAGER_NODE_IO(DecompositionKernel2, internal_watch_input_output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(DecompositionKernel2, internal_watch_output_output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(DecompositionKernel2, internal_watch_computeresult_output, OUT, STREAM, 1, PUSH)
MANAGER_NODE_IO(input1, input1, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(input2, input2, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(v, v, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(output1, output1, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(output2, output2, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel1, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel1, i, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel1, loopcounter, IN, STREAM, 8, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel1, big, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel1, v, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel2, n, IN, STREAM, 10, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel2, i, IN, STREAM, 10, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel2, j, IN, STREAM, 10, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel2, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel2, output, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(watch_DecompositionKernel2, computeresult, IN, STREAM, 1, PUSH)
MANAGER_NODE_IO(Stream_10, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_9, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_9, output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_8, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_8, output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_14, input, IN, STREAM, 64, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 64, PULL)
MANAGER_NODE_IO(Stream_12, output, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_56, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_56, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_60, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_60, output, OUT, STREAM, 128, PUSH)
MANAGER_NODE_IO(Stream_44, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_44, output, OUT, STREAM, 64, PULL)
MANAGER_NODE_IO(Stream_48, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_48, output, OUT, STREAM, 64, PULL)
MANAGER_NODE_IO(Stream_52, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_52, output, OUT, STREAM, 64, PULL)
MANAGER_NODE_IO(Stream_54, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_54, output, OUT, STREAM, 64, PULL)
MANAGER_NODE_IO(Stream_58, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_58, output, OUT, STREAM, 64, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(input1, input1, Stream_9, input, 128)
MANAGER_STREAM(input2, input2, Stream_10, input, 128)
MANAGER_STREAM(v, v, Stream_8, input, 128)
MANAGER_STREAM(DecompositionKernel1, output, Stream_58, input, 64)
MANAGER_STREAM(DecompositionKernel2, output, Stream_54, input, 64)
MANAGER_STREAM(DecompositionKernel1, internal_watch_input_output, watch_DecompositionKernel1, input, 64)
MANAGER_STREAM(DecompositionKernel1, internal_watch_i_output, watch_DecompositionKernel1, i, 32)
MANAGER_STREAM(DecompositionKernel1, internal_watch_loopcounter_output, watch_DecompositionKernel1, loopcounter, 8)
MANAGER_STREAM(DecompositionKernel1, internal_watch_big_output, watch_DecompositionKernel1, big, 64)
MANAGER_STREAM(DecompositionKernel1, internal_watch_v_output, watch_DecompositionKernel1, v, 64)
MANAGER_STREAM(DecompositionKernel2, internal_watch_n_output, watch_DecompositionKernel2, n, 10)
MANAGER_STREAM(DecompositionKernel2, internal_watch_i_output, watch_DecompositionKernel2, i, 10)
MANAGER_STREAM(DecompositionKernel2, internal_watch_j_output, watch_DecompositionKernel2, j, 10)
MANAGER_STREAM(DecompositionKernel2, internal_watch_input_output, watch_DecompositionKernel2, input, 64)
MANAGER_STREAM(DecompositionKernel2, internal_watch_output_output, watch_DecompositionKernel2, output, 64)
MANAGER_STREAM(DecompositionKernel2, internal_watch_computeresult_output, watch_DecompositionKernel2, computeresult, 1)
MANAGER_STREAM(Stream_10, output, Stream_44, input, 64)
MANAGER_STREAM(Stream_9, output, Stream_48, input, 64)
MANAGER_STREAM(Stream_8, output, Stream_52, input, 64)
MANAGER_STREAM(Stream_14, output, Stream_56, input, 128)
MANAGER_STREAM(Stream_12, output, Stream_60, input, 128)
MANAGER_STREAM(Stream_56, output, output2, output2, 128)
MANAGER_STREAM(Stream_60, output, output1, output1, 128)
MANAGER_STREAM(Stream_44, output, DecompositionKernel2, input, 64)
MANAGER_STREAM(Stream_48, output, DecompositionKernel1, input, 64)
MANAGER_STREAM(Stream_52, output, DecompositionKernel1, v, 64)
MANAGER_STREAM(Stream_54, output, Stream_14, input, 64)
MANAGER_STREAM(Stream_58, output, Stream_12, input, 64)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(DecompositionKernel1, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
MANAGER_NODE_STACK_TRACE(DecompositionKernel2, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
MANAGER_NODE_STACK_TRACE(input1, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromCPU(CustomManager.java:1166)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:22)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
MANAGER_NODE_STACK_TRACE(input2, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromCPU(CustomManager.java:1166)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:23)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
MANAGER_NODE_STACK_TRACE(v, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamFromCPU(CustomManager.java:1166)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:24)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
MANAGER_NODE_STACK_TRACE(output1, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToCPU(CustomManager.java:1170)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:30)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
MANAGER_NODE_STACK_TRACE(output2, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStreamToCPU(CustomManager.java:1170)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:31)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
MANAGER_NODE_STACK_TRACE(watch_DecompositionKernel1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(watch_DecompositionKernel2, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_9, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_8, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_56, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_60, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_44, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_48, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_52, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_54, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
MANAGER_NODE_STACK_TRACE(Stream_58, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
#endif

#ifdef MANAGER_NODE_NOT_VISIBLE
#define MANAGER_NODE_NOT_VISIBLE_PRESENT 1
MANAGER_NODE_NOT_VISIBLE(watch_DecompositionKernel1)
MANAGER_NODE_NOT_VISIBLE(watch_DecompositionKernel2)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(DecompositionKernel1, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(DecompositionKernel1)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(DecompositionKernel1, DecompositionKernel1)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(DecompositionKernel1, input, 0)
DEBUG_INPUT_BITS(DecompositionKernel1, v, 1)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(DecompositionKernel1, output, 0)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(DecompositionKernel2, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(DecompositionKernel2)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(DecompositionKernel2, DecompositionKernel2)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(DecompositionKernel2, input, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(DecompositionKernel2, output, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(input1, PCIePullSourceSyncMax3, "input1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(input2, PCIePullSourceSyncMax3, "input2")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(v, PCIePullSourceSyncMax3, "v")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_9, DualAspectMuxSync, "Stream_9", 64, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, DualAspectMuxSync, "Stream_10", 64, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_8, DualAspectMuxSync, "Stream_8", 64, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_48, FifoPushToPullSync, "Stream_48", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_44, FifoPushToPullSync, "Stream_44", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_52, FifoPushToPullSync, "Stream_52", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(DecompositionKernel2, DecompositionKernel2, "DecompositionKernel2")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(DecompositionKernel1, DecompositionKernel1, "DecompositionKernel1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_54, FifoPushToPullSync, "Stream_54", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(watch_DecompositionKernel2, WatchSync, "watch_DecompositionKernel2", "Decomposition", "DecompositionKernel2")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_58, FifoPushToPullSync, "Stream_58", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(watch_DecompositionKernel1, WatchSync, "watch_DecompositionKernel1", "Decomposition", "DecompositionKernel1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, DualAspectRegSync, "Stream_14", 64, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, DualAspectRegSync, "Stream_12", 64, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_56, PullToPushAdapterSync, "Stream_56")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_60, PullToPushAdapterSync, "Stream_60")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(output2, PCIePushSinkSyncMax3, "output2")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(output1, PCIePushSinkSyncMax3, "output1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 3, 2, 0, 0, 0, 0, 0, 74)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "1809c412ea45c974e64c29ea069a56d928dd2530476ffd707eda0af723355201")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_fill_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_flush_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_flush_start_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_full_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel2, addDebugRegister, reg_dbg_stall_vector, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_ctld_almost_empty, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_ctld_done, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_ctld_empty, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_ctld_read, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 6, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_ctld_request, 2, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_fill_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_flush_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_flush_start_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_full_level, 5, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DecompositionKernel1, addDebugRegister, reg_dbg_stall_vector, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel2, addInput, "n", "n", boost::make_shared< DecimalWriter< HWOffsetFix<10,0,UNSIGNED>, false > >())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel2, addInput, "i", "i", boost::make_shared< DecimalWriter< HWOffsetFix<10,0,UNSIGNED>, false > >())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel2, addInput, "j", "j", boost::make_shared< DecimalWriter< HWOffsetFix<10,0,UNSIGNED>, false > >())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel2, addInput, "input", "input", boost::make_shared< DecimalWriter< HWFloat<11,53>, false > >())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel2, addInput, "output", "output", boost::make_shared< DecimalWriter< HWFloat<11,53>, false > >())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel2, addInput, "computeresult", "computeResult", boost::make_shared< DecimalWriter< HWOffsetFix<1,0,UNSIGNED>, false > >())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel1, addInput, "input", "input", boost::make_shared< DecimalWriter< HWFloat<11,53>, false > >())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel1, addInput, "i", "i", boost::make_shared< DecimalWriter< HWOffsetFix<32,0,UNSIGNED>, false > >())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel1, addInput, "loopcounter", "loopCounter", boost::make_shared< DecimalWriter< HWOffsetFix<8,0,UNSIGNED>, false > >())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel1, addInput, "big", "big", boost::make_shared< DecimalWriter< HWFloat<11,53>, false > >())
MANAGER_NODE_CPP_SIM_MODEL_SETUP(watch_DecompositionKernel1, addInput, "v", "v", boost::make_shared< DecimalWriter< HWFloat<11,53>, false > >())
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(input1, STREAM_FROM_HOST, 0)
PCIE_STREAM(input2, STREAM_FROM_HOST, 1)
PCIE_STREAM(v, STREAM_FROM_HOST, 2)
PCIE_STREAM(output2, STREAM_TO_HOST, 0)
PCIE_STREAM(output1, STREAM_TO_HOST, 1)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(DecompositionKernel2.io_input_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(DecompositionKernel2.n, 0x1, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(DecompositionKernel2.io_output_force_disabled, 0x5, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(DecompositionKernel2.run_cycle_count, 0x6, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(DecompositionKernel2.current_run_cycle_count, 0xc, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(DecompositionKernel2.dbg_ctld_almost_empty, 0x12, 1, hwBits(1))
REG(DecompositionKernel2.dbg_ctld_done, 0x13, 1, hwBits(1))
REG(DecompositionKernel2.dbg_ctld_empty, 0x14, 1, hwBits(1))
REG(DecompositionKernel2.dbg_ctld_read, 0x15, 1, hwBits(1))
REG(DecompositionKernel2.dbg_ctld_read_pipe_dbg, 0x16, 1, hwBits(3))
REG(DecompositionKernel2.dbg_ctld_request, 0x17, 1, hwBits(1))
REG(DecompositionKernel2.dbg_done_out, 0x18, 1, hwBits(1))
REG(DecompositionKernel2.dbg_fill_level, 0x19, 1, hwBits(7))
REG(DecompositionKernel2.dbg_flush_level, 0x1a, 1, hwBits(7))
REG(DecompositionKernel2.dbg_flush_start, 0x1b, 1, hwBits(1))
REG(DecompositionKernel2.dbg_flush_start_level, 0x1c, 1, hwBits(7))
REG(DecompositionKernel2.dbg_flushing, 0x1d, 1, hwBits(1))
REG(DecompositionKernel2.dbg_full_level, 0x1e, 1, hwBits(7))
REG(DecompositionKernel2.dbg_out_stall, 0x1f, 1, hwBits(1))
REG(DecompositionKernel2.dbg_out_valid, 0x20, 1, hwBits(1))
REG(DecompositionKernel2.dbg_stall_vector, 0x21, 1, hwBits(1))
REG(DecompositionKernel1.n, 0x22, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(DecompositionKernel1.io_input_force_disabled, 0x26, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(DecompositionKernel1.io_v_force_disabled, 0x27, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(DecompositionKernel1.io_output_force_disabled, 0x28, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(DecompositionKernel1.run_cycle_count, 0x29, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(DecompositionKernel1.current_run_cycle_count, 0x2f, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(DecompositionKernel1.dbg_ctld_almost_empty, 0x35, 1, hwBits(2))
REG(DecompositionKernel1.dbg_ctld_done, 0x36, 1, hwBits(2))
REG(DecompositionKernel1.dbg_ctld_empty, 0x37, 1, hwBits(2))
REG(DecompositionKernel1.dbg_ctld_read, 0x38, 1, hwBits(2))
REG(DecompositionKernel1.dbg_ctld_read_pipe_dbg, 0x39, 1, hwBits(6))
REG(DecompositionKernel1.dbg_ctld_request, 0x3a, 1, hwBits(2))
REG(DecompositionKernel1.dbg_done_out, 0x3b, 1, hwBits(1))
REG(DecompositionKernel1.dbg_fill_level, 0x3c, 1, hwBits(5))
REG(DecompositionKernel1.dbg_flush_level, 0x3d, 1, hwBits(5))
REG(DecompositionKernel1.dbg_flush_start, 0x3e, 1, hwBits(1))
REG(DecompositionKernel1.dbg_flush_start_level, 0x3f, 1, hwBits(5))
REG(DecompositionKernel1.dbg_flushing, 0x40, 1, hwBits(1))
REG(DecompositionKernel1.dbg_full_level, 0x41, 1, hwBits(5))
REG(DecompositionKernel1.dbg_out_stall, 0x42, 1, hwBits(1))
REG(DecompositionKernel1.dbg_out_valid, 0x43, 1, hwBits(1))
REG(DecompositionKernel1.dbg_stall_vector, 0x44, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x45, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x46, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(DecompositionKernel2.io_input_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(DecompositionKernel2.n, 0x1, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(DecompositionKernel2.io_output_force_disabled, 0x5, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(DecompositionKernel2.run_cycle_count, 0x6, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(DecompositionKernel2.current_run_cycle_count, 0xc, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_ctld_almost_empty, 0x12, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_ctld_done, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_ctld_empty, 0x14, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_ctld_read, 0x15, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_ctld_read_pipe_dbg, 0x16, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_ctld_request, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_done_out, 0x18, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_fill_level, 0x19, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_flush_level, 0x1a, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_flush_start, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_flush_start_level, 0x1c, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_flushing, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_full_level, 0x1e, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_out_stall, 0x1f, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_out_valid, 0x20, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel2.dbg_stall_vector, 0x21, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.n, 0x22, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(DecompositionKernel1.io_input_force_disabled, 0x26, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(DecompositionKernel1.io_v_force_disabled, 0x27, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(DecompositionKernel1.io_output_force_disabled, 0x28, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(DecompositionKernel1.run_cycle_count, 0x29, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(DecompositionKernel1.current_run_cycle_count, 0x2f, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_ctld_almost_empty, 0x35, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_ctld_done, 0x36, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_ctld_empty, 0x37, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_ctld_read, 0x38, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_ctld_read_pipe_dbg, 0x39, 1, hwBits(6), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_ctld_request, 0x3a, 1, hwBits(2), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_done_out, 0x3b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_fill_level, 0x3c, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_flush_level, 0x3d, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_flush_start, 0x3e, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_flush_start_level, 0x3f, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_flushing, 0x40, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_full_level, 0x41, 1, hwBits(5), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_out_stall, 0x42, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_out_valid, 0x43, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DecompositionKernel1.dbg_stall_vector, 0x44, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x45, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x46, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("1809c412ea45c974e64c29ea069a56d928dd2530476ffd707eda0af723355201")
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME Decomposition
#endif /* DEFINE_DESIGN_NAME */

#ifdef WATCH_STREAMS
#define WATCH_STREAMS_PRESENT 1
WATCH_STREAMS(DecompositionKernel1, internal_watch_input_output)
WATCH_STREAMS(DecompositionKernel1, internal_watch_i_output)
WATCH_STREAMS(DecompositionKernel1, internal_watch_loopcounter_output)
WATCH_STREAMS(DecompositionKernel1, internal_watch_big_output)
WATCH_STREAMS(DecompositionKernel1, internal_watch_v_output)
#endif

#ifdef WATCH_STREAMS
#define WATCH_STREAMS_PRESENT 1
WATCH_STREAMS(DecompositionKernel2, internal_watch_n_output)
WATCH_STREAMS(DecompositionKernel2, internal_watch_i_output)
WATCH_STREAMS(DecompositionKernel2, internal_watch_j_output)
WATCH_STREAMS(DecompositionKernel2, internal_watch_input_output)
WATCH_STREAMS(DecompositionKernel2, internal_watch_output_output)
WATCH_STREAMS(DecompositionKernel2, internal_watch_computeresult_output)
#endif

#ifdef WATCHNODE
#define WATCHNODE_PRESENT 1
WATCHNODE(DecompositionKernel1, input, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:48)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
WATCHNODE(DecompositionKernel1, i, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:49)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
WATCHNODE(DecompositionKernel1, loopCounter, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:50)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
WATCHNODE(DecompositionKernel1, big, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:51)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
WATCHNODE(DecompositionKernel1, v, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:52)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
WATCHNODE(DecompositionKernel2, n, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:84)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
WATCHNODE(DecompositionKernel2, i, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:85)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
WATCHNODE(DecompositionKernel2, j, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:86)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
WATCHNODE(DecompositionKernel2, input, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:87)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
WATCHNODE(DecompositionKernel2, output, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:88)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
WATCHNODE(DecompositionKernel2, computeResult, java.lang.Thread.getStackTrace(Thread.java:1479)/com.maxeler.photon.nodes.NodeWatch.addInput(NodeWatch.java:324)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:136)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:131)/com.maxeler.photon.libs.WatchFactory.watch(WatchFactory.java:127)/com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)/decomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:89)/decomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)/decomposition.DecompositionManager.main(DecompositionManager.maxj:71))
#endif

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_Decomposition_H
#define SLIC_DECLARATIONS_Decomposition_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define Decomposition_PCIE_ALIGNMENT (16)
#define Decomposition_FMEM_SIZE (1024)


/*----------------------------------------------------------------------------*/
/*-------------------------- Interface firstKernel ---------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'firstKernel'.
 * 
 * \param [in] param_n Interface Parameter "n".
 * \param [in] instream_input1 The stream should be of size ((param_n + (param_n % 2)) * 8) bytes.
 * \param [in] instream_v The stream should be of size ((param_n + (param_n % 2)) * 8) bytes.
 * \param [out] outstream_output1 The stream should be of size 16 bytes.
 */
void Decomposition_firstKernel(
	int64_t param_n,
	const double *instream_input1,
	const double *instream_v,
	double *outstream_output1);

/**
 * \brief Basic static non-blocking function for the interface 'firstKernel'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_n Interface Parameter "n".
 * \param [in] instream_input1 The stream should be of size ((param_n + (param_n % 2)) * 8) bytes.
 * \param [in] instream_v The stream should be of size ((param_n + (param_n % 2)) * 8) bytes.
 * \param [out] outstream_output1 The stream should be of size 16 bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Decomposition_firstKernel_nonblock(
	int64_t param_n,
	const double *instream_input1,
	const double *instream_v,
	double *outstream_output1);

/**
 * \brief Advanced static interface, structure for the engine interface 'firstKernel'
 * 
 */
typedef struct { 
	int64_t param_n; /**<  [in] Interface Parameter "n". */
	const double *instream_input1; /**<  [in] The stream should be of size ((param_n + (param_n % 2)) * 8) bytes. */
	const double *instream_v; /**<  [in] The stream should be of size ((param_n + (param_n % 2)) * 8) bytes. */
	double *outstream_output1; /**<  [out] The stream should be of size 16 bytes. */
} Decomposition_firstKernel_actions_t;

/**
 * \brief Advanced static function for the interface 'firstKernel'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Decomposition_firstKernel_run(
	max_engine_t *engine,
	Decomposition_firstKernel_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'firstKernel'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_firstKernel_run_nonblock(
	max_engine_t *engine,
	Decomposition_firstKernel_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'firstKernel'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Decomposition_firstKernel_run_group(max_group_t *group, Decomposition_firstKernel_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'firstKernel'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_firstKernel_run_group_nonblock(max_group_t *group, Decomposition_firstKernel_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'firstKernel'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Decomposition_firstKernel_run_array(max_engarray_t *engarray, Decomposition_firstKernel_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'firstKernel'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_firstKernel_run_array_nonblock(max_engarray_t *engarray, Decomposition_firstKernel_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Decomposition_firstKernel_convert(max_file_t *maxfile, Decomposition_firstKernel_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*-------------------------- Interface secondKernel --------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'secondKernel'.
 * 
 * \param [in] param_n Interface Parameter "n".
 * \param [in] instream_input2 The stream should be of size (((param_n * param_n) + (param_n % 2)) * 8) bytes.
 * \param [out] outstream_output2 The stream should be of size (((param_n * param_n) + (param_n % 2)) * 8) bytes.
 */
void Decomposition_secondKernel(
	int64_t param_n,
	const double *instream_input2,
	double *outstream_output2);

/**
 * \brief Basic static non-blocking function for the interface 'secondKernel'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_n Interface Parameter "n".
 * \param [in] instream_input2 The stream should be of size (((param_n * param_n) + (param_n % 2)) * 8) bytes.
 * \param [out] outstream_output2 The stream should be of size (((param_n * param_n) + (param_n % 2)) * 8) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Decomposition_secondKernel_nonblock(
	int64_t param_n,
	const double *instream_input2,
	double *outstream_output2);

/**
 * \brief Advanced static interface, structure for the engine interface 'secondKernel'
 * 
 */
typedef struct { 
	int64_t param_n; /**<  [in] Interface Parameter "n". */
	const double *instream_input2; /**<  [in] The stream should be of size (((param_n * param_n) + (param_n % 2)) * 8) bytes. */
	double *outstream_output2; /**<  [out] The stream should be of size (((param_n * param_n) + (param_n % 2)) * 8) bytes. */
} Decomposition_secondKernel_actions_t;

/**
 * \brief Advanced static function for the interface 'secondKernel'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Decomposition_secondKernel_run(
	max_engine_t *engine,
	Decomposition_secondKernel_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'secondKernel'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_secondKernel_run_nonblock(
	max_engine_t *engine,
	Decomposition_secondKernel_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'secondKernel'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Decomposition_secondKernel_run_group(max_group_t *group, Decomposition_secondKernel_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'secondKernel'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_secondKernel_run_group_nonblock(max_group_t *group, Decomposition_secondKernel_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'secondKernel'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Decomposition_secondKernel_run_array(max_engarray_t *engarray, Decomposition_secondKernel_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'secondKernel'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_secondKernel_run_array_nonblock(max_engarray_t *engarray, Decomposition_secondKernel_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Decomposition_secondKernel_convert(max_file_t *maxfile, Decomposition_secondKernel_actions_t *interface_actions);



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] ticks_DecompositionKernel1 The number of ticks for which kernel "DecompositionKernel1" will run.
 * \param [in] ticks_DecompositionKernel2 The number of ticks for which kernel "DecompositionKernel2" will run.
 * \param [in] inscalar_DecompositionKernel1_n Input scalar parameter "DecompositionKernel1.n".
 * \param [in] inscalar_DecompositionKernel2_n Input scalar parameter "DecompositionKernel2.n".
 * \param [in] instream_input1 Stream "input1".
 * \param [in] instream_size_input1 The size of the stream instream_input1 in bytes.
 * \param [in] instream_input2 Stream "input2".
 * \param [in] instream_size_input2 The size of the stream instream_input2 in bytes.
 * \param [in] instream_v Stream "v".
 * \param [in] instream_size_v The size of the stream instream_v in bytes.
 * \param [out] outstream_output1 Stream "output1".
 * \param [in] outstream_size_output1 The size of the stream outstream_output1 in bytes.
 * \param [out] outstream_output2 Stream "output2".
 * \param [in] outstream_size_output2 The size of the stream outstream_output2 in bytes.
 */
void Decomposition(
	uint64_t ticks_DecompositionKernel1,
	uint64_t ticks_DecompositionKernel2,
	uint64_t inscalar_DecompositionKernel1_n,
	uint64_t inscalar_DecompositionKernel2_n,
	const void *instream_input1,
	size_t instream_size_input1,
	const void *instream_input2,
	size_t instream_size_input2,
	const void *instream_v,
	size_t instream_size_v,
	void *outstream_output1,
	size_t outstream_size_output1,
	void *outstream_output2,
	size_t outstream_size_output2);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] ticks_DecompositionKernel1 The number of ticks for which kernel "DecompositionKernel1" will run.
 * \param [in] ticks_DecompositionKernel2 The number of ticks for which kernel "DecompositionKernel2" will run.
 * \param [in] inscalar_DecompositionKernel1_n Input scalar parameter "DecompositionKernel1.n".
 * \param [in] inscalar_DecompositionKernel2_n Input scalar parameter "DecompositionKernel2.n".
 * \param [in] instream_input1 Stream "input1".
 * \param [in] instream_size_input1 The size of the stream instream_input1 in bytes.
 * \param [in] instream_input2 Stream "input2".
 * \param [in] instream_size_input2 The size of the stream instream_input2 in bytes.
 * \param [in] instream_v Stream "v".
 * \param [in] instream_size_v The size of the stream instream_v in bytes.
 * \param [out] outstream_output1 Stream "output1".
 * \param [in] outstream_size_output1 The size of the stream outstream_output1 in bytes.
 * \param [out] outstream_output2 Stream "output2".
 * \param [in] outstream_size_output2 The size of the stream outstream_output2 in bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *Decomposition_nonblock(
	uint64_t ticks_DecompositionKernel1,
	uint64_t ticks_DecompositionKernel2,
	uint64_t inscalar_DecompositionKernel1_n,
	uint64_t inscalar_DecompositionKernel2_n,
	const void *instream_input1,
	size_t instream_size_input1,
	const void *instream_input2,
	size_t instream_size_input2,
	const void *instream_v,
	size_t instream_size_v,
	void *outstream_output1,
	size_t outstream_size_output1,
	void *outstream_output2,
	size_t outstream_size_output2);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	uint64_t ticks_DecompositionKernel1; /**<  [in] The number of ticks for which kernel "DecompositionKernel1" will run. */
	uint64_t ticks_DecompositionKernel2; /**<  [in] The number of ticks for which kernel "DecompositionKernel2" will run. */
	uint64_t inscalar_DecompositionKernel1_n; /**<  [in] Input scalar parameter "DecompositionKernel1.n". */
	uint64_t inscalar_DecompositionKernel2_n; /**<  [in] Input scalar parameter "DecompositionKernel2.n". */
	const void *instream_input1; /**<  [in] Stream "input1". */
	size_t instream_size_input1; /**<  [in] The size of the stream instream_input1 in bytes. */
	const void *instream_input2; /**<  [in] Stream "input2". */
	size_t instream_size_input2; /**<  [in] The size of the stream instream_input2 in bytes. */
	const void *instream_v; /**<  [in] Stream "v". */
	size_t instream_size_v; /**<  [in] The size of the stream instream_v in bytes. */
	void *outstream_output1; /**<  [out] Stream "output1". */
	size_t outstream_size_output1; /**<  [in] The size of the stream outstream_output1 in bytes. */
	void *outstream_output2; /**<  [out] Stream "output2". */
	size_t outstream_size_output2; /**<  [in] The size of the stream outstream_output2 in bytes. */
} Decomposition_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void Decomposition_run(
	max_engine_t *engine,
	Decomposition_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_run_nonblock(
	max_engine_t *engine,
	Decomposition_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Decomposition_run_group(max_group_t *group, Decomposition_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_run_group_nonblock(max_group_t *group, Decomposition_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Decomposition_run_array(max_engarray_t *engarray, Decomposition_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_run_array_nonblock(max_engarray_t *engarray, Decomposition_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Decomposition_convert(max_file_t *maxfile, Decomposition_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* Decomposition_init(void);

/* Error handling functions */
int Decomposition_has_errors(void);
const char* Decomposition_get_errors(void);
void Decomposition_clear_errors(void);
/* Free statically allocated maxfile data */
void Decomposition_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int Decomposition_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int Decomposition_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_Decomposition_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(DecompositionKernel1, 63, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 3, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounterChain(Count.java:493)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:30)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 89, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x13; 19.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream$OffsetExpr.getDFEVar(Stream.java:186)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:29)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 5, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:523)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:32)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 98, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x00; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:35)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 7, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:35)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 8, NodeInputMappedReg, "Scalar input (io_input_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:35)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 9, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:35)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 10, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:35)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 11, NodeInput, "Input(input)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:35)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 64, NodeOutput, "Output(internal_watch_input_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 73, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 1, NodeInputMappedReg, "Scalar input (n)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:27)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 4, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:523)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:31)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 74, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 65, NodeOutput, "Output(internal_watch_i_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 79, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 86, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 66, NodeOutput, "Output(internal_watch_loopcounter_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 97, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:39)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 19, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:39)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 96, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x00; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:36)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 13, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:36)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 14, NodeInputMappedReg, "Scalar input (io_v_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:36)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 15, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:36)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 16, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:36)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 17, NodeInput, "Input(v)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:36)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 28, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 76, NodeFIFO, "FIFO(15)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 23, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:772)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:40)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 88, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 78, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 25, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1148)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:40)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 72, NodeStreamOffset, "stream offset: -19", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:269)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:42)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 20, NodeConstantRawBits, "{HWFloat:11, 53}\n0x0000000000000000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1169)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:39)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 21, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1169)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:39)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 67, NodeOutput, "Output(internal_watch_big_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 68, NodeOutput, "Output(internal_watch_v_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 95, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:925)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 31, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:925)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 32, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:573)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 94, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x01; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:925)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 34, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:925)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 35, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:573)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 80, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 36, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 93, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000001; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:925)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 38, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:925)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 39, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:573)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 92, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x02; 2.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:925)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 41, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:925)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 42, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:573)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 82, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 43, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:518)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 44, NodeOr, "|", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.or(DFEVar.java:406)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 45, NodeInputMappedReg, "Scalar input (io_output_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 46, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 47, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 85, NodeFIFO, "FIFO(18)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 0, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:24)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 87, NodeFIFO, "FIFO(11)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 27, NodeCast, "{HWFloat:11, 53}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 29, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:772)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 50, NodeRAM, "RAM(RAM_SINGLE_PORT)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.alloc(Mem.java:67)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:23)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 48, NodeOutput, "Output(output)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:685)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:45)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 49, NodeWatch, "WatchNode", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:48)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 55, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 91, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 52, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 53, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 54, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 56, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 90, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 58, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 59, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 61, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 62, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel1, 60, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:20)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
#endif

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(DecompositionKernel2, 47, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 4, NodeInputMappedReg, "Scalar input (n)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.scalarInput(IO.java:1106)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:67)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 5, NodeCast, "{HWOffsetFix:10, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:161)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:67)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 48, NodeOutput, "Output(internal_watch_n_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 3, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounterChain(Count.java:493)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:66)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 8, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:523)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:69)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 6, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain.addCounter(CounterChain.java:523)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:68)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 62, NodeFIFO, "FIFO(60)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 80, NodeFIFO, "FIFO(29)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 81, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 49, NodeOutput, "Output(internal_watch_i_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 59, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 75, NodeFIFO, "FIFO(29)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 76, NodeFIFO, "FIFO(29)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 77, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 78, NodeFIFO, "FIFO(28)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 79, NodeFIFO, "FIFO(3)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 50, NodeOutput, "Output(internal_watch_j_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 0, NodeInputMappedReg, "Scalar input (io_input_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:64)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:64)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 2, NodeInput, "Input(input)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:64)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 60, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 82, NodeFIFO, "FIFO(27)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 83, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 84, NodeFIFO, "FIFO(28)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 85, NodeFIFO, "FIFO(17)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 86, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 87, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 51, NodeOutput, "Output(internal_watch_input_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 94, NodeConstantRawBits, "{HWOffsetFix:10, 0, UNSIGNED}\n0x000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:636)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:77)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 17, NodeNeq, "!=", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neq(DFEVar.java:636)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:77)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 93, NodeConstantRawBits, "{HWOffsetFix:10, 0, UNSIGNED}\n0x000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:79)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 19, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:79)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 92, NodeConstantRawBits, "{HWOffsetFix:10, 0, UNSIGNED}\n0x000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:71)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 12, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:71)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 10, NodeConstantRawBits, "{HWOffsetFix:10, 0, UNSIGNED}\n0x000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:99)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:70)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 31, NodeRAM, "RAM(RAM_TWO_PORT)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.alloc(Mem.java:67)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:61)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 15, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1002)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:75)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 91, NodeConstantRawBits, "{HWOffsetFix:10, 0, UNSIGNED}\n0x000; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:72)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 14, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:585)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:72)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 34, NodeRAM, "RAM(RAM_TWO_PORT)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.alloc(Mem.java:67)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:62)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 71, NodeFIFO, "FIFO(29)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 88, NodeFIFO, "FIFO(30)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 33, NodeRAM, "RAM(RAM_TWO_PORT)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.alloc(Mem.java:67)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:61)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 21, NodeMul, "*", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.mul(DFEVar.java:956)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:79)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 22, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:910)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:79)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 32, NodeRAM, "RAM(RAM_TWO_PORT)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Mem.alloc(Mem.java:67)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:61)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 20, NodeDiv, "/", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.div(DFEVar.java:1002)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:79)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 23, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1148)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:79)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 24, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1148)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:80)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 52, NodeOutput, "Output(internal_watch_output_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 74, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 53, NodeOutput, "Output(internal_watch_computeresult_output)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:357)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:75)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 26, NodeInputMappedReg, "Scalar input (io_output_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:81)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 27, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:81)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 29, NodeOutput, "Output(output)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:81)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 30, NodeWatch, "WatchNode", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.simWatch(DFEVar.java:1092)\ndecomposition.DecompositionKernel.<init>(DecompositionKernel.maxj:84)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 39, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 90, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 36, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 37, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 38, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 40, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 89, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 42, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 43, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 45, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 46, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
PHOTON_NODE_DATA(DecompositionKernel2, 44, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addKernel(CustomManager.java:996)\ndecomposition.DecompositionManager.<init>(DecompositionManager.maxj:21)\ndecomposition.DecompositionManager.main(DecompositionManager.maxj:71)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int Decomposition_has_errors(void)
{	return stored_has_error; }
const char* Decomposition_get_errors(void)
{	return stored_error; }
void Decomposition_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char Decomposition_use_simulation[16];
static void Decomposition_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(Decomposition_use_simulation, 16, "Decompos_%05ld_", pid);
}
static const char *Decomposition_check_use_simulation(void)
{
	Decomposition_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = Decomposition_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int Decomposition_simulation_launch = 0;
int Decomposition_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = Decomposition_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int Decomposition_simulator_stop(void)
{
	const char *use_sim = Decomposition_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void Decomposition_static_init(void) 
{
	stored_maxfile = Decomposition_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = Decomposition_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = Decomposition_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			Decomposition_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void Decomposition_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (Decomposition_simulation_launch == 1) {
		int sim_stat = Decomposition_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		Decomposition_simulation_launch = 0;
	}
}

static int Decomposition_get_pcie_alignment(void)
{
#ifdef Decomposition_PCIE_ALIGNMENT
	return ((Decomposition_PCIE_ALIGNMENT < 1) ? 16 : Decomposition_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int Decomposition_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = Decomposition_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *Decomposition_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = Decomposition_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*-------------------------- Interface firstKernel ---------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Decomposition_firstKernel_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Decomposition_firstKernel_callback_stream_t;

typedef struct Decomposition_firstKernel_callback_data {
	Decomposition_firstKernel_callback_stream_t stream[5]; 
	int count;
	int max_count;
} Decomposition_firstKernel_callback_data_t;

static void Decomposition_firstKernel_callback_internal(void *cb_data)
{
	Decomposition_firstKernel_callback_data_t *data = (Decomposition_firstKernel_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Decomposition_firstKernel_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Decomposition_firstKernel_convert_internal(
	max_file_t *maxfile,
	Decomposition_firstKernel_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Decomposition_firstKernel_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Decomposition_firstKernel_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Decomposition_firstKernel_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 5;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Decomposition_firstKernel_callback_internal;
	}

	int64_t param_n = interface_actions->param_n;
	
	int32_t param_DecompositionKernel1_loopLength = max_get_offset_auto_loop_size( actions, "DecompositionKernel1", "loopLength" );
	

	/* temporary variables */
	int64_t tmp_0 = ((param_n + (param_n % 2)) * 8);
	int64_t tmp_1 = ((param_n + (param_n % 2)) * param_DecompositionKernel1_loopLength);

	/* code for scalar DecompositionKernel1.run_cycle_count */
	uint64_t ticks_DecompositionKernel1 = tmp_1;
	max_set_ticks(actions, "DecompositionKernel1", tmp_1);
	CHECK_ERRORS;
	/* end of code for scalar DecompositionKernel1.run_cycle_count*/
	
	max_ignore_scalar(actions, "DecompositionKernel2", "run_cycle_count" );
	CHECK_ERRORS;
	
	/* code for scalar DecompositionKernel1.n */
	uint64_t inscalar_DecompositionKernel1_n = param_n;
	max_set_uint64t(actions, "DecompositionKernel1", "n", inscalar_DecompositionKernel1_n);
	CHECK_ERRORS;
	/* end of code for scalar DecompositionKernel1.n*/
	
	max_ignore_scalar(actions, "DecompositionKernel2", "n" );
	CHECK_ERRORS;
	
	/* code for stream input1 */
	size_t instream_size_input1 = tmp_0;
	if (instream_size_input1 > 0) {
		const double *stream_ptr = interface_actions->instream_input1;
		if (use_callback && (1 == Decomposition_check_aligned(interface_actions->instream_input1))) {
			double *aligned_instream_input1 = malloc(instream_size_input1);
			if (aligned_instream_input1 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'input1'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_input1;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_input1;
			(&cb_data->stream[cb_data->count])->size        = instream_size_input1;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_input1, interface_actions->instream_input1, instream_size_input1);
			stream_ptr = aligned_instream_input1;
		}
		max_queue_input(actions, "input1", stream_ptr, instream_size_input1);
		CHECK_ERRORS;
	}
	/* end of code for stream input1 */
	
	max_ignore_stream(actions, "input2" );
	CHECK_ERRORS;
	
	/* code for stream v */
	size_t instream_size_v = tmp_0;
	if (instream_size_v > 0) {
		const double *stream_ptr = interface_actions->instream_v;
		if (use_callback && (1 == Decomposition_check_aligned(interface_actions->instream_v))) {
			double *aligned_instream_v = malloc(instream_size_v);
			if (aligned_instream_v == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'v'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_v;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_v;
			(&cb_data->stream[cb_data->count])->size        = instream_size_v;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_v, interface_actions->instream_v, instream_size_v);
			stream_ptr = aligned_instream_v;
		}
		max_queue_input(actions, "v", stream_ptr, instream_size_v);
		CHECK_ERRORS;
	}
	/* end of code for stream v */
	
	/* code for stream output1 */
	size_t outstream_size_output1 = 16;
	if (outstream_size_output1 > 0) {
		double *stream_ptr = interface_actions->outstream_output1;
		if (use_callback && (1 == Decomposition_check_aligned(interface_actions->outstream_output1))) {
			double *aligned_outstream_output1 = malloc(outstream_size_output1);
			if (aligned_outstream_output1 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'output1'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_output1;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_output1;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_output1;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_output1;
		}
		max_queue_output(actions, "output1", stream_ptr, outstream_size_output1);
		CHECK_ERRORS;
	}
	/* end of code for stream output1 */
	
	max_ignore_stream(actions, "output2" );
	CHECK_ERRORS;
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Decomposition_firstKernel(
	int64_t param_n,
	const double *instream_input1,
	const double *instream_v,
	double *outstream_output1)
{
	(void) pthread_once(&slic_bs_is_initialised, Decomposition_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Decomposition_firstKernel_nonblock(param_n, instream_input1, instream_v, outstream_output1);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Decomposition_firstKernel_nonblock(
	int64_t param_n,
	const double *instream_input1,
	const double *instream_v,
	double *outstream_output1)
{
	Decomposition_firstKernel_actions_t interface_actions;
	interface_actions.param_n = param_n;
	interface_actions.instream_input1 = instream_input1;
	interface_actions.instream_v = instream_v;
	interface_actions.outstream_output1 = outstream_output1;
	(void) pthread_once(&slic_bs_is_initialised, Decomposition_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Decomposition_firstKernel_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Decomposition_firstKernel_run(
	max_engine_t *engine,
	Decomposition_firstKernel_actions_t *interface_actions)
{
	max_run_t *run = Decomposition_firstKernel_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Decomposition_firstKernel_run_nonblock(
	max_engine_t *engine,
	Decomposition_firstKernel_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Decomposition_firstKernel_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'firstKernel'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Decomposition_firstKernel_run_group(max_group_t *group, Decomposition_firstKernel_actions_t *interface_actions)
{
	max_run_t *run = Decomposition_firstKernel_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'firstKernel'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_firstKernel_run_group_nonblock(max_group_t *group, Decomposition_firstKernel_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Decomposition_firstKernel_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'firstKernel'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Decomposition_firstKernel_run_array(max_engarray_t *engarray, Decomposition_firstKernel_actions_t *interface_actions[])
{
	max_run_t *run = Decomposition_firstKernel_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'firstKernel'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_firstKernel_run_array_nonblock(max_engarray_t *engarray, Decomposition_firstKernel_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Decomposition_firstKernel_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Decomposition_firstKernel_convert(max_file_t *maxfile, Decomposition_firstKernel_actions_t *interface_actions)
{
	return Decomposition_firstKernel_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL




/*----------------------------------------------------------------------------*/
/*-------------------------- Interface secondKernel --------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Decomposition_secondKernel_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Decomposition_secondKernel_callback_stream_t;

typedef struct Decomposition_secondKernel_callback_data {
	Decomposition_secondKernel_callback_stream_t stream[5]; 
	int count;
	int max_count;
} Decomposition_secondKernel_callback_data_t;

static void Decomposition_secondKernel_callback_internal(void *cb_data)
{
	Decomposition_secondKernel_callback_data_t *data = (Decomposition_secondKernel_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Decomposition_secondKernel_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Decomposition_secondKernel_convert_internal(
	max_file_t *maxfile,
	Decomposition_secondKernel_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Decomposition_secondKernel_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Decomposition_secondKernel_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Decomposition_secondKernel_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 5;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Decomposition_secondKernel_callback_internal;
	}

	int64_t param_n = interface_actions->param_n;
	

	/* temporary variables */
	int64_t tmp_0 = (((param_n * param_n) + (param_n % 2)) * 8);
	int64_t tmp_1 = ((param_n * param_n) + (param_n % 2));

	max_ignore_scalar(actions, "DecompositionKernel1", "run_cycle_count" );
	CHECK_ERRORS;
	
	/* code for scalar DecompositionKernel2.run_cycle_count */
	uint64_t ticks_DecompositionKernel2 = tmp_1;
	max_set_ticks(actions, "DecompositionKernel2", tmp_1);
	CHECK_ERRORS;
	/* end of code for scalar DecompositionKernel2.run_cycle_count*/
	
	max_ignore_scalar(actions, "DecompositionKernel1", "n" );
	CHECK_ERRORS;
	
	/* code for scalar DecompositionKernel2.n */
	uint64_t inscalar_DecompositionKernel2_n = param_n;
	max_set_uint64t(actions, "DecompositionKernel2", "n", inscalar_DecompositionKernel2_n);
	CHECK_ERRORS;
	/* end of code for scalar DecompositionKernel2.n*/
	
	max_ignore_stream(actions, "input1" );
	CHECK_ERRORS;
	
	/* code for stream input2 */
	size_t instream_size_input2 = tmp_0;
	if (instream_size_input2 > 0) {
		const double *stream_ptr = interface_actions->instream_input2;
		if (use_callback && (1 == Decomposition_check_aligned(interface_actions->instream_input2))) {
			double *aligned_instream_input2 = malloc(instream_size_input2);
			if (aligned_instream_input2 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'input2'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_input2;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_input2;
			(&cb_data->stream[cb_data->count])->size        = instream_size_input2;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_input2, interface_actions->instream_input2, instream_size_input2);
			stream_ptr = aligned_instream_input2;
		}
		max_queue_input(actions, "input2", stream_ptr, instream_size_input2);
		CHECK_ERRORS;
	}
	/* end of code for stream input2 */
	
	max_ignore_stream(actions, "v" );
	CHECK_ERRORS;
	
	max_ignore_stream(actions, "output1" );
	CHECK_ERRORS;
	
	/* code for stream output2 */
	size_t outstream_size_output2 = tmp_0;
	if (outstream_size_output2 > 0) {
		double *stream_ptr = interface_actions->outstream_output2;
		if (use_callback && (1 == Decomposition_check_aligned(interface_actions->outstream_output2))) {
			double *aligned_outstream_output2 = malloc(outstream_size_output2);
			if (aligned_outstream_output2 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'output2'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_output2;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_output2;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_output2;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_output2;
		}
		max_queue_output(actions, "output2", stream_ptr, outstream_size_output2);
		CHECK_ERRORS;
	}
	/* end of code for stream output2 */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Decomposition_secondKernel(
	int64_t param_n,
	const double *instream_input2,
	double *outstream_output2)
{
	(void) pthread_once(&slic_bs_is_initialised, Decomposition_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Decomposition_secondKernel_nonblock(param_n, instream_input2, outstream_output2);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Decomposition_secondKernel_nonblock(
	int64_t param_n,
	const double *instream_input2,
	double *outstream_output2)
{
	Decomposition_secondKernel_actions_t interface_actions;
	interface_actions.param_n = param_n;
	interface_actions.instream_input2 = instream_input2;
	interface_actions.outstream_output2 = outstream_output2;
	(void) pthread_once(&slic_bs_is_initialised, Decomposition_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Decomposition_secondKernel_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Decomposition_secondKernel_run(
	max_engine_t *engine,
	Decomposition_secondKernel_actions_t *interface_actions)
{
	max_run_t *run = Decomposition_secondKernel_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Decomposition_secondKernel_run_nonblock(
	max_engine_t *engine,
	Decomposition_secondKernel_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Decomposition_secondKernel_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'secondKernel'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Decomposition_secondKernel_run_group(max_group_t *group, Decomposition_secondKernel_actions_t *interface_actions)
{
	max_run_t *run = Decomposition_secondKernel_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'secondKernel'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_secondKernel_run_group_nonblock(max_group_t *group, Decomposition_secondKernel_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Decomposition_secondKernel_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'secondKernel'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Decomposition_secondKernel_run_array(max_engarray_t *engarray, Decomposition_secondKernel_actions_t *interface_actions[])
{
	max_run_t *run = Decomposition_secondKernel_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'secondKernel'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_secondKernel_run_array_nonblock(max_engarray_t *engarray, Decomposition_secondKernel_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Decomposition_secondKernel_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Decomposition_secondKernel_convert(max_file_t *maxfile, Decomposition_secondKernel_actions_t *interface_actions)
{
	return Decomposition_secondKernel_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL




/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/


#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct Decomposition_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} Decomposition_callback_stream_t;

typedef struct Decomposition_callback_data {
	Decomposition_callback_stream_t stream[5]; 
	int count;
	int max_count;
} Decomposition_callback_data_t;

static void Decomposition_callback_internal(void *cb_data)
{
	Decomposition_callback_data_t *data = (Decomposition_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		Decomposition_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* Decomposition_convert_internal(
	max_file_t *maxfile,
	Decomposition_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	Decomposition_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(Decomposition_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function Decomposition_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 5;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &Decomposition_callback_internal;
	}

	/* code for scalar DecompositionKernel1.run_cycle_count */
	uint64_t ticks_DecompositionKernel1 = interface_actions->ticks_DecompositionKernel1;
	max_set_ticks(actions, "DecompositionKernel1", ticks_DecompositionKernel1);
	CHECK_ERRORS;
	/* end of code for scalar DecompositionKernel1.run_cycle_count*/
	
	/* code for scalar DecompositionKernel2.run_cycle_count */
	uint64_t ticks_DecompositionKernel2 = interface_actions->ticks_DecompositionKernel2;
	max_set_ticks(actions, "DecompositionKernel2", ticks_DecompositionKernel2);
	CHECK_ERRORS;
	/* end of code for scalar DecompositionKernel2.run_cycle_count*/
	
	/* code for scalar DecompositionKernel1.n */
	uint64_t inscalar_DecompositionKernel1_n = interface_actions->inscalar_DecompositionKernel1_n;
	max_set_uint64t(actions, "DecompositionKernel1", "n", inscalar_DecompositionKernel1_n);
	CHECK_ERRORS;
	/* end of code for scalar DecompositionKernel1.n*/
	
	/* code for scalar DecompositionKernel2.n */
	uint64_t inscalar_DecompositionKernel2_n = interface_actions->inscalar_DecompositionKernel2_n;
	max_set_uint64t(actions, "DecompositionKernel2", "n", inscalar_DecompositionKernel2_n);
	CHECK_ERRORS;
	/* end of code for scalar DecompositionKernel2.n*/
	
	/* code for stream input1 */
	size_t instream_size_input1 = interface_actions->instream_size_input1;
	if (instream_size_input1 > 0) {
		const void *stream_ptr = interface_actions->instream_input1;
		if (use_callback && (1 == Decomposition_check_aligned(interface_actions->instream_input1))) {
			void *aligned_instream_input1 = malloc(instream_size_input1);
			if (aligned_instream_input1 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'input1'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_input1;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_input1;
			(&cb_data->stream[cb_data->count])->size        = instream_size_input1;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_input1, interface_actions->instream_input1, instream_size_input1);
			stream_ptr = aligned_instream_input1;
		}
		max_queue_input(actions, "input1", stream_ptr, instream_size_input1);
		CHECK_ERRORS;
	}
	/* end of code for stream input1 */
	
	/* code for stream input2 */
	size_t instream_size_input2 = interface_actions->instream_size_input2;
	if (instream_size_input2 > 0) {
		const void *stream_ptr = interface_actions->instream_input2;
		if (use_callback && (1 == Decomposition_check_aligned(interface_actions->instream_input2))) {
			void *aligned_instream_input2 = malloc(instream_size_input2);
			if (aligned_instream_input2 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'input2'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_input2;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_input2;
			(&cb_data->stream[cb_data->count])->size        = instream_size_input2;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_input2, interface_actions->instream_input2, instream_size_input2);
			stream_ptr = aligned_instream_input2;
		}
		max_queue_input(actions, "input2", stream_ptr, instream_size_input2);
		CHECK_ERRORS;
	}
	/* end of code for stream input2 */
	
	/* code for stream v */
	size_t instream_size_v = interface_actions->instream_size_v;
	if (instream_size_v > 0) {
		const void *stream_ptr = interface_actions->instream_v;
		if (use_callback && (1 == Decomposition_check_aligned(interface_actions->instream_v))) {
			void *aligned_instream_v = malloc(instream_size_v);
			if (aligned_instream_v == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'v'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_v;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_v;
			(&cb_data->stream[cb_data->count])->size        = instream_size_v;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_v, interface_actions->instream_v, instream_size_v);
			stream_ptr = aligned_instream_v;
		}
		max_queue_input(actions, "v", stream_ptr, instream_size_v);
		CHECK_ERRORS;
	}
	/* end of code for stream v */
	
	/* code for stream output1 */
	size_t outstream_size_output1 = interface_actions->outstream_size_output1;
	if (outstream_size_output1 > 0) {
		void *stream_ptr = interface_actions->outstream_output1;
		if (use_callback && (1 == Decomposition_check_aligned(interface_actions->outstream_output1))) {
			void *aligned_outstream_output1 = malloc(outstream_size_output1);
			if (aligned_outstream_output1 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'output1'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_output1;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_output1;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_output1;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_output1;
		}
		max_queue_output(actions, "output1", stream_ptr, outstream_size_output1);
		CHECK_ERRORS;
	}
	/* end of code for stream output1 */
	
	/* code for stream output2 */
	size_t outstream_size_output2 = interface_actions->outstream_size_output2;
	if (outstream_size_output2 > 0) {
		void *stream_ptr = interface_actions->outstream_output2;
		if (use_callback && (1 == Decomposition_check_aligned(interface_actions->outstream_output2))) {
			void *aligned_outstream_output2 = malloc(outstream_size_output2);
			if (aligned_outstream_output2 == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'output2'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_output2;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_output2;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_output2;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_output2;
		}
		max_queue_output(actions, "output2", stream_ptr, outstream_size_output2);
		CHECK_ERRORS;
	}
	/* end of code for stream output2 */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void Decomposition(
	uint64_t ticks_DecompositionKernel1,
	uint64_t ticks_DecompositionKernel2,
	uint64_t inscalar_DecompositionKernel1_n,
	uint64_t inscalar_DecompositionKernel2_n,
	const void *instream_input1,
	size_t instream_size_input1,
	const void *instream_input2,
	size_t instream_size_input2,
	const void *instream_v,
	size_t instream_size_v,
	void *outstream_output1,
	size_t outstream_size_output1,
	void *outstream_output2,
	size_t outstream_size_output2)
{
	(void) pthread_once(&slic_bs_is_initialised, Decomposition_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = Decomposition_nonblock(ticks_DecompositionKernel1, ticks_DecompositionKernel2, inscalar_DecompositionKernel1_n, inscalar_DecompositionKernel2_n, instream_input1, instream_size_input1, instream_input2, instream_size_input2, instream_v, instream_size_v, outstream_output1, outstream_size_output1, outstream_output2, outstream_size_output2);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Decomposition_nonblock(
	uint64_t ticks_DecompositionKernel1,
	uint64_t ticks_DecompositionKernel2,
	uint64_t inscalar_DecompositionKernel1_n,
	uint64_t inscalar_DecompositionKernel2_n,
	const void *instream_input1,
	size_t instream_size_input1,
	const void *instream_input2,
	size_t instream_size_input2,
	const void *instream_v,
	size_t instream_size_v,
	void *outstream_output1,
	size_t outstream_size_output1,
	void *outstream_output2,
	size_t outstream_size_output2)
{
	Decomposition_actions_t interface_actions;
	interface_actions.ticks_DecompositionKernel1 = ticks_DecompositionKernel1;
	interface_actions.ticks_DecompositionKernel2 = ticks_DecompositionKernel2;
	interface_actions.inscalar_DecompositionKernel1_n = inscalar_DecompositionKernel1_n;
	interface_actions.inscalar_DecompositionKernel2_n = inscalar_DecompositionKernel2_n;
	interface_actions.instream_input1 = instream_input1;
	interface_actions.instream_size_input1 = instream_size_input1;
	interface_actions.instream_input2 = instream_input2;
	interface_actions.instream_size_input2 = instream_size_input2;
	interface_actions.instream_v = instream_v;
	interface_actions.instream_size_v = instream_size_v;
	interface_actions.outstream_output1 = outstream_output1;
	interface_actions.outstream_size_output1 = outstream_size_output1;
	interface_actions.outstream_output2 = outstream_output2;
	interface_actions.outstream_size_output2 = outstream_size_output2;
	(void) pthread_once(&slic_bs_is_initialised, Decomposition_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Decomposition_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void Decomposition_run(
	max_engine_t *engine,
	Decomposition_actions_t *interface_actions)
{
	max_run_t *run = Decomposition_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *Decomposition_run_nonblock(
	max_engine_t *engine,
	Decomposition_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = Decomposition_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void Decomposition_run_group(max_group_t *group, Decomposition_actions_t *interface_actions)
{
	max_run_t *run = Decomposition_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_run_group_nonblock(max_group_t *group, Decomposition_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = Decomposition_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void Decomposition_run_array(max_engarray_t *engarray, Decomposition_actions_t *interface_actions[])
{
	max_run_t *run = Decomposition_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *Decomposition_run_array_nonblock(max_engarray_t *engarray, Decomposition_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = Decomposition_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* Decomposition_convert(max_file_t *maxfile, Decomposition_actions_t *interface_actions)
{
	return Decomposition_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(firstKernel)	
SLIC_PARAMETER_UINT64(int64_t, n, param_n)	
SLIC_AUTO_LOOP_OFFSET(int32_t, DecompositionKernel1, loopLength, param_DecompositionKernel1_loopLength)	
SLIC_TEMP_VAR(int64_t tmp_0 = ((param_n + (param_n % 2)) * 8);)	
SLIC_TEMP_VAR(int64_t tmp_1 = ((param_n + (param_n % 2)) * param_DecompositionKernel1_loopLength);)	
SLIC_SET_TICKS(DecompositionKernel1, tmp_1)	
SLIC_SCALAR_DISABLED(DecompositionKernel2, run_cycle_count)	
SLIC_SCALAR_UINT64(DecompositionKernel1, n, param_n)	
SLIC_SCALAR_DISABLED(DecompositionKernel2, n)	
SLIC_STREAM(input1, tmp_0)	
SLIC_STREAM_DISABLED(input2)	
SLIC_STREAM(v, tmp_0)	
SLIC_STREAM(output1, 16)	
SLIC_STREAM_DISABLED(output2)	
SLIC_MODE_END(firstKernel)
SLIC_MODE_START(secondKernel)	
SLIC_PARAMETER_UINT64(int64_t, n, param_n)	
SLIC_TEMP_VAR(int64_t tmp_0 = (((param_n * param_n) + (param_n % 2)) * 8);)	
SLIC_TEMP_VAR(int64_t tmp_1 = ((param_n * param_n) + (param_n % 2));)	
SLIC_SCALAR_DISABLED(DecompositionKernel1, run_cycle_count)	
SLIC_SET_TICKS(DecompositionKernel2, tmp_1)	
SLIC_SCALAR_DISABLED(DecompositionKernel1, n)	
SLIC_SCALAR_UINT64(DecompositionKernel2, n, param_n)	
SLIC_STREAM_DISABLED(input1)	
SLIC_STREAM(input2, tmp_0)	
SLIC_STREAM_DISABLED(v)	
SLIC_STREAM_DISABLED(output1)	
SLIC_STREAM(output2, tmp_0)	
SLIC_MODE_END(secondKernel)
SLIC_MODE_START(default)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkRlY29tcG9zaXRpb24uaCIg
bmFtZT0iRGVjb21wb3NpdGlvbiI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJR05NRU5UIiB0eXBl
PSJsb25nIiB2YWx1ZT0iMTYiLz48Y29uc3RhbnQgbmFtZT0iRk1FTV9TSVpFIiB0eXBlPSJsb25n
IiB2YWx1ZT0iMTAyNCIvPjxlbmdpbmVtb2RlIG5hbWU9ImZpcnN0S2VybmVsIj48ZnVuY3Rpb24g
bmFtZT0iRGVjb21wb3NpdGlvbl9maXJzdEtlcm5lbCIgcmV0dXJuLXZhbHVlPSJ2b2lkIj48c2Nh
bGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7biZxdW90Oy4iIGRpcmVjdGlvbj0i
SW5wdXQiIG5hbWU9InBhcmFtX24iIHR5cGU9ImludDY0X3QiLz48YXJyYXkgZGVzYz0iVGhlIHN0
cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAoKHBhcmFtX24gKyAocGFyYW1fbiAlIDIpKSAqIDgpIGJ5
dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1faW5wdXQxIiBzaXplPSIoKHBh
cmFtX24gKyAocGFyYW1fbiAlIDIpKSAqIDgpIiB0cmFuc3Bvc2U9InRydWUiIHR5cGU9ImRvdWJs
ZSI+PGRpbWVuc2lvbiBpbmRleD0iMCI+PGxlbmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlP
cGVyYXRvciBvcGVyYXRvcj0iLyIgdmFsdWU9IigoKHBhcmFtX24gKyAocGFyYW1fbiAlIDIpKSAq
IDgpIC8gOCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2
YWx1ZT0iKChwYXJhbV9uICsgKHBhcmFtX24gJSAyKSkgKiA4KSI+PGZ1bmN0aW9uQ2FsbD48bnVt
QmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IisiIHZhbHVlPSIocGFyYW1fbiArIChwYXJhbV9uICUg
MikpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9uIi8+PGZ1bmN0aW9uQ2FsbD48bW9kdWxvIG9w
ZXJhdG9yPSIlIiB2YWx1ZT0iKHBhcmFtX24gJSAyKSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1f
biIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSIyIi8+PC9tb2R1bG8+PC9mdW5jdGlvbkNhbGw+PC9u
dW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iOCIv
PjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNvbnN0YW50VmFsdWUgdmFsdWU9
IjgiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjwvbGVuZ3RoPjwvZGltZW5z
aW9uPjwvYXJyYXk+PGFycmF5IGRlc2M9IlRoZSBzdHJlYW0gc2hvdWxkIGJlIG9mIHNpemUgKChw
YXJhbV9uICsgKHBhcmFtX24gJSAyKSkgKiA4KSBieXRlcy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5h
bWU9Imluc3RyZWFtX3YiIHNpemU9IigocGFyYW1fbiArIChwYXJhbV9uICUgMikpICogOCkiIHRy
YW5zcG9zZT0idHJ1ZSIgdHlwZT0iZG91YmxlIj48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3Ro
PjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKCgo
cGFyYW1fbiArIChwYXJhbV9uICUgMikpICogOCkgLyA4KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmlu
YXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIoKHBhcmFtX24gKyAocGFyYW1fbiAlIDIp
KSAqIDgpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iKyIgdmFs
dWU9IihwYXJhbV9uICsgKHBhcmFtX24gJSAyKSkiPjx1c2VyUGFyYW0gdmFsdWU9InBhcmFtX24i
Lz48ZnVuY3Rpb25DYWxsPjxtb2R1bG8gb3BlcmF0b3I9IiUiIHZhbHVlPSIocGFyYW1fbiAlIDIp
Ij48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9uIi8+PGNvbnN0YW50VmFsdWUgdmFsdWU9IjIiLz48
L21vZHVsbz48L2Z1bmN0aW9uQ2FsbD48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxs
Pjxjb25zdGFudFZhbHVlIHZhbHVlPSI4Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9u
Q2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iOCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5j
dGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48YXJyYXkgZGVzYz0iVGhlIHN0
cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAxNiBieXRlcy4iIGRpcmVjdGlvbj0iT3V0cHV0IiBuYW1l
PSJvdXRzdHJlYW1fb3V0cHV0MSIgc2l6ZT0iMTYiIHRyYW5zcG9zZT0idHJ1ZSIgdHlwZT0iZG91
YmxlIj48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFy
eU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKDE2IC8gOCkiPjxjb25zdGFudFZhbHVlIHZh
bHVlPSIxNiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI4Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48
L2Z1bmN0aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjwvZnVuY3Rpb24+PC9l
bmdpbmVtb2RlPjxlbmdpbmVtb2RlIG5hbWU9InNlY29uZEtlcm5lbCI+PGZ1bmN0aW9uIG5hbWU9
IkRlY29tcG9zaXRpb25fc2Vjb25kS2VybmVsIiByZXR1cm4tdmFsdWU9InZvaWQiPjxzY2FsYXIg
ZGVzYz0iSW50ZXJmYWNlIFBhcmFtZXRlciAmcXVvdDtuJnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1
dCIgbmFtZT0icGFyYW1fbiIgdHlwZT0iaW50NjRfdCIvPjxhcnJheSBkZXNjPSJUaGUgc3RyZWFt
IHNob3VsZCBiZSBvZiBzaXplICgoKHBhcmFtX24gKiBwYXJhbV9uKSArIChwYXJhbV9uICUgMikp
ICogOCkgYnl0ZXMuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9pbnB1dDIiIHNp
emU9IigoKHBhcmFtX24gKiBwYXJhbV9uKSArIChwYXJhbV9uICUgMikpICogOCkiIHRyYW5zcG9z
ZT0idHJ1ZSIgdHlwZT0iZG91YmxlIj48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxmdW5j
dGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKCgoKHBhcmFt
X24gKiBwYXJhbV9uKSArIChwYXJhbV9uICUgMikpICogOCkgLyA4KSI+PGZ1bmN0aW9uQ2FsbD48
bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIoKChwYXJhbV9uICogcGFyYW1f
bikgKyAocGFyYW1fbiAlIDIpKSAqIDgpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRv
ciBvcGVyYXRvcj0iKyIgdmFsdWU9IigocGFyYW1fbiAqIHBhcmFtX24pICsgKHBhcmFtX24gJSAy
KSkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1ZT0i
KHBhcmFtX24gKiBwYXJhbV9uKSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fbiIvPjx1c2VyUGFy
YW0gdmFsdWU9InBhcmFtX24iLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxsPjxm
dW5jdGlvbkNhbGw+PG1vZHVsbyBvcGVyYXRvcj0iJSIgdmFsdWU9IihwYXJhbV9uICUgMikiPjx1
c2VyUGFyYW0gdmFsdWU9InBhcmFtX24iLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iMiIvPjwvbW9k
dWxvPjwvZnVuY3Rpb25DYWxsPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+PGNv
bnN0YW50VmFsdWUgdmFsdWU9IjgiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxs
Pjxjb25zdGFudFZhbHVlIHZhbHVlPSI4Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9u
Q2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjxhcnJheSBkZXNjPSJUaGUgc3RyZWFt
IHNob3VsZCBiZSBvZiBzaXplICgoKHBhcmFtX24gKiBwYXJhbV9uKSArIChwYXJhbV9uICUgMikp
ICogOCkgYnl0ZXMuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c3RyZWFtX291dHB1dDIi
IHNpemU9IigoKHBhcmFtX24gKiBwYXJhbV9uKSArIChwYXJhbV9uICUgMikpICogOCkiIHRyYW5z
cG9zZT0idHJ1ZSIgdHlwZT0iZG91YmxlIj48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxm
dW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKCgoKHBh
cmFtX24gKiBwYXJhbV9uKSArIChwYXJhbV9uICUgMikpICogOCkgLyA4KSI+PGZ1bmN0aW9uQ2Fs
bD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9IioiIHZhbHVlPSIoKChwYXJhbV9uICogcGFy
YW1fbikgKyAocGFyYW1fbiAlIDIpKSAqIDgpIj48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVy
YXRvciBvcGVyYXRvcj0iKyIgdmFsdWU9IigocGFyYW1fbiAqIHBhcmFtX24pICsgKHBhcmFtX24g
JSAyKSkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIqIiB2YWx1
ZT0iKHBhcmFtX24gKiBwYXJhbV9uKSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1fbiIvPjx1c2Vy
UGFyYW0gdmFsdWU9InBhcmFtX24iLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxs
PjxmdW5jdGlvbkNhbGw+PG1vZHVsbyBvcGVyYXRvcj0iJSIgdmFsdWU9IihwYXJhbV9uICUgMiki
Pjx1c2VyUGFyYW0gdmFsdWU9InBhcmFtX24iLz48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iMiIvPjwv
bW9kdWxvPjwvZnVuY3Rpb25DYWxsPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9mdW5jdGlvbkNhbGw+
PGNvbnN0YW50VmFsdWUgdmFsdWU9IjgiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25D
YWxsPjxjb25zdGFudFZhbHVlIHZhbHVlPSI4Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0
aW9uQ2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjwvZnVuY3Rpb24+PC9lbmdpbmVt
b2RlPjxlbmdpbmVtb2RlIG5hbWU9ImRlZmF1bHQiPjxmdW5jdGlvbiBuYW1lPSJEZWNvbXBvc2l0
aW9uIiByZXR1cm4tdmFsdWU9InZvaWQiPjxzY2FsYXIgZGVzYz0iVGhlIG51bWJlciBvZiB0aWNr
cyBmb3Igd2hpY2gga2VybmVsICZxdW90O0RlY29tcG9zaXRpb25LZXJuZWwxJnF1b3Q7IHdpbGwg
cnVuLiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0idGlja3NfRGVjb21wb3NpdGlvbktlcm5lbDEi
IHR5cGU9InVpbnQ2NF90Ii8+PHNjYWxhciBkZXNjPSJUaGUgbnVtYmVyIG9mIHRpY2tzIGZvciB3
aGljaCBrZXJuZWwgJnF1b3Q7RGVjb21wb3NpdGlvbktlcm5lbDImcXVvdDsgd2lsbCBydW4uIiBk
aXJlY3Rpb249IklucHV0IiBuYW1lPSJ0aWNrc19EZWNvbXBvc2l0aW9uS2VybmVsMiIgdHlwZT0i
dWludDY0X3QiLz48c2NhbGFyIGRlc2M9IklucHV0IHNjYWxhciBwYXJhbWV0ZXIgJnF1b3Q7RGVj
b21wb3NpdGlvbktlcm5lbDEubiZxdW90Oy4iIGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9Imluc2Nh
bGFyX0RlY29tcG9zaXRpb25LZXJuZWwxX24iIHR5cGU9InVpbnQ2NF90Ii8+PHNjYWxhciBkZXNj
PSJJbnB1dCBzY2FsYXIgcGFyYW1ldGVyICZxdW90O0RlY29tcG9zaXRpb25LZXJuZWwyLm4mcXVv
dDsuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnNjYWxhcl9EZWNvbXBvc2l0aW9uS2VybmVs
Ml9uIiB0eXBlPSJ1aW50NjRfdCIvPjxhcnJheSBkZXNjPSJTdHJlYW0gJnF1b3Q7aW5wdXQxJnF1
b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1faW5wdXQxIiBzaXplPSJpbnN0
cmVhbV9zaXplX2lucHV0MSIgdHJhbnNwb3NlPSJmYWxzZSIgdHlwZT0idm9pZCIvPjxzY2FsYXIg
ZGVzYz0iVGhlIHNpemUgb2YgdGhlIHN0cmVhbSBpbnN0cmVhbV9pbnB1dDEgaW4gYnl0ZXMuIiBk
aXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9zaXplX2lucHV0MSIgdHlwZT0idWludDY0
X3QiLz48YXJyYXkgZGVzYz0iU3RyZWFtICZxdW90O2lucHV0MiZxdW90Oy4iIGRpcmVjdGlvbj0i
SW5wdXQiIG5hbWU9Imluc3RyZWFtX2lucHV0MiIgc2l6ZT0iaW5zdHJlYW1fc2l6ZV9pbnB1dDIi
IHRyYW5zcG9zZT0iZmFsc2UiIHR5cGU9InZvaWQiLz48c2NhbGFyIGRlc2M9IlRoZSBzaXplIG9m
IHRoZSBzdHJlYW0gaW5zdHJlYW1faW5wdXQyIGluIGJ5dGVzLiIgZGlyZWN0aW9uPSJJbnB1dCIg
bmFtZT0iaW5zdHJlYW1fc2l6ZV9pbnB1dDIiIHR5cGU9InVpbnQ2NF90Ii8+PGFycmF5IGRlc2M9
IlN0cmVhbSAmcXVvdDt2JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1f
diIgc2l6ZT0iaW5zdHJlYW1fc2l6ZV92IiB0cmFuc3Bvc2U9ImZhbHNlIiB0eXBlPSJ2b2lkIi8+
PHNjYWxhciBkZXNjPSJUaGUgc2l6ZSBvZiB0aGUgc3RyZWFtIGluc3RyZWFtX3YgaW4gYnl0ZXMu
IiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJpbnN0cmVhbV9zaXplX3YiIHR5cGU9InVpbnQ2NF90
Ii8+PGFycmF5IGRlc2M9IlN0cmVhbSAmcXVvdDtvdXRwdXQxJnF1b3Q7LiIgZGlyZWN0aW9uPSJP
dXRwdXQiIG5hbWU9Im91dHN0cmVhbV9vdXRwdXQxIiBzaXplPSJvdXRzdHJlYW1fc2l6ZV9vdXRw
dXQxIiB0cmFuc3Bvc2U9ImZhbHNlIiB0eXBlPSJ2b2lkIi8+PHNjYWxhciBkZXNjPSJUaGUgc2l6
ZSBvZiB0aGUgc3RyZWFtIG91dHN0cmVhbV9vdXRwdXQxIGluIGJ5dGVzLiIgZGlyZWN0aW9uPSJJ
bnB1dCIgbmFtZT0ib3V0c3RyZWFtX3NpemVfb3V0cHV0MSIgdHlwZT0idWludDY0X3QiLz48YXJy
YXkgZGVzYz0iU3RyZWFtICZxdW90O291dHB1dDImcXVvdDsuIiBkaXJlY3Rpb249Ik91dHB1dCIg
bmFtZT0ib3V0c3RyZWFtX291dHB1dDIiIHNpemU9Im91dHN0cmVhbV9zaXplX291dHB1dDIiIHRy
YW5zcG9zZT0iZmFsc2UiIHR5cGU9InZvaWQiLz48c2NhbGFyIGRlc2M9IlRoZSBzaXplIG9mIHRo
ZSBzdHJlYW0gb3V0c3RyZWFtX291dHB1dDIgaW4gYnl0ZXMuIiBkaXJlY3Rpb249IklucHV0IiBu
YW1lPSJvdXRzdHJlYW1fc2l6ZV9vdXRwdXQyIiB0eXBlPSJ1aW50NjRfdCIvPjwvZnVuY3Rpb24+
PC9lbmdpbmVtb2RlPjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBEZWNvbXBvc2l0aW9uX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2hh
c19lcnJvcjsgfQpjb25zdCBjaGFyKiBEZWNvbXBvc2l0aW9uX2dldF9lcnJvcnModm9pZCkKewly
ZXR1cm4gc3RvcmVkX2Vycm9yOyB9CnZvaWQgRGVjb21wb3NpdGlvbl9jbGVhcl9lcnJvcnModm9p
ZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9yID0gTlVMTDsKCXN0b3JlZF9o
YXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBEZWNvbXBvc2l0aW9uX3VzZV9zaW11bGF0aW9u
WzE2XTsKc3RhdGljIHZvaWQgRGVjb21wb3NpdGlvbl9kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkK
ewoJbG9uZyBwaWQgPSAoKGxvbmcpIGdldHBpZCgpKSAlIDEwMDAwMDsKCXNucHJpbnRmKERlY29t
cG9zaXRpb25fdXNlX3NpbXVsYXRpb24sIDE2LCAiRGVjb21wb3NfJTA1bGRfIiwgcGlkKTsKfQpz
dGF0aWMgY29uc3QgY2hhciAqRGVjb21wb3NpdGlvbl9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lk
KQp7CglEZWNvbXBvc2l0aW9uX2RlZl91c2Vfc2ltdWxhdGlvbigpOwoJY29uc3QgY2hhciAqdXNl
X3NpbSA9IG1heF9jb25maWdfZ2V0X3N0cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFUSU9OKTsK
CWlmICh1c2Vfc2ltID09IE5VTEwpIHsKCQl1c2Vfc2ltID0gRGVjb21wb3NpdGlvbl91c2Vfc2lt
dWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElP
TiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBEZWNvbXBvc2l0
aW9uX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IERlY29tcG9zaXRpb25fc2ltdWxhdG9yX3N0
YXJ0KHZvaWQpCnsKCWludCByZXR2YWwgPSAwOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IERlY29t
cG9zaXRpb25fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJp
bnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEg
LW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAq
cGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3Ry
bmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikp
KTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYs
IDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2lt
dWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJ
CWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2
YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQg
RGVjb21wb3NpdGlvbl9zaW11bGF0b3Jfc3RvcCh2b2lkKQp7Cgljb25zdCBjaGFyICp1c2Vfc2lt
ID0gRGVjb21wb3NpdGlvbl9jaGVja191c2Vfc2ltdWxhdGlvbigpOwoJY2hhciBidWZmWzEwMjRd
OwoJc25wcmludGYoYnVmZiwgMTAyNCwgIlBBVEg9c2ltdXRpbHM6JFBBVEggbWF4Y29tcGlsZXJz
aW0gLWQgMSAtbiAlcyAtYyBNQVgzNDI0QSAtUyBzaW11dGlscyBzdG9wIiwgdXNlX3NpbSk7CglG
SUxFICpwaXBlX2ZwID0gcG9wZW4oYnVmZiwgInIiKTsKCWlmIChwaXBlX2ZwID09IE5VTEwpIHsK
CQlzdHJuY2F0KGJ1ZmYsICIgOiBmYWlsZWQgdG8gZXhlY3V0ZS4iLCAoMTAyNCAtIHN0cmxlbihi
dWZmKSkpOwoJCXNldF9lcnJvcihidWZmKTsKCQlyZXR1cm4gLTE7Cgl9Cgl3aGlsZSAoZmdldHMo
YnVmZiwgMTAyNCwgcGlwZV9mcCkgIT0gTlVMTCkgewoJCS8qIFVuY29tbWVudCB0aGlzIHRvIGdl
dCBzaW11bGF0b3IgY29tbWFuZCBvdXRwdXQgKi8KCQkvKiBmcHJpbnRmKHN0ZGVyciwgYnVmZik7
ICovCgkJOwoJfQoJcGNsb3NlKHBpcGVfZnApOwoJcmV0dXJuIDA7Cn0KCnN0YXRpYyB2b2lkIERl
Y29tcG9zaXRpb25fc3RhdGljX2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gRGVjb21w
b3NpdGlvbl9pbml0KCk7CglpZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4X29rKHN0
b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCWlmKG1h
eF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VS
Uk9SKSkgYWJvcnQoKTsKCQllbHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBtYXhmaWxl
Iik7IHJldHVybjsgfQoJfQoJaWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkgewoJCXNl
dF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3JzKCkpKTsK
CQlyZXR1cm47Cgl9CglpZighbWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19J
TlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRfbWF4Zmls
ZS0+ZXJyb3JzLCAwKTsKCXRpbWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRfdGltZW91
dChzdG9yZWRfbWF4ZmlsZSwgMzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IERlY29tcG9zaXRp
b25fY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWlmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21h
eGZpbGUsIHVzZV9zaW0pID09IDApIHsKCQlpbnQgc2ltX3N0YXQgPSBEZWNvbXBvc2l0aW9uX3Np
bXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1v
bihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsKCQkJRGVjb21wb3NpdGlvbl9zaW11
bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJy
b3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3Ry
dWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQg
J3VzZV9zaW11bGF0aW9uPTxzaW11bGF0b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91
ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhl
IGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4
X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJ
cmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9lbmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwg
IioiKTsKCWlmICghbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSB7CgkJCWZwcmludGYoc3RkZXJyLCAiXG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5n
IG5vdy5cblxuIik7CgkJCWZmbHVzaChzdGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJ
CXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxl
ID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0gCgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4
ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7Cn0Kdm9pZCBEZWNvbXBvc2l0aW9uX2ZyZWUodm9pZCkK
ewoJaWYgKHN0b3JlZF9lbmdpbmUgIT0gTlVMTCkgewoJCW1heF91bmxvYWQoc3RvcmVkX2VuZ2lu
ZSk7CgkJc3RvcmVkX2VuZ2luZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVkX21heGZpbGUgIT0gTlVM
TCkgewoJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCXN0b3JlZF9tYXhmaWxlID0g
TlVMTDsKCX0KCWlmIChzdG9yZWRfZXJyb3IgIT0gTlVMTCkgewoJCWZyZWUoc3RvcmVkX2Vycm9y
KTsKCQlzdG9yZWRfZXJyb3IgPSBOVUxMOwoJfQoJaWYgKERlY29tcG9zaXRpb25fc2ltdWxhdGlv
bl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IERlY29tcG9zaXRpb25fc2ltdWxhdG9y
X3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnByaW50ZihzdGRlcnIsICJFcnJv
ciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCURlY29tcG9zaXRpb25fc2ltdWxhdGlvbl9s
YXVuY2ggPSAwOwoJfQp9CgpzdGF0aWMgaW50IERlY29tcG9zaXRpb25fZ2V0X3BjaWVfYWxpZ25t
ZW50KHZvaWQpCnsKI2lmZGVmIERlY29tcG9zaXRpb25fUENJRV9BTElHTk1FTlQKCXJldHVybiAo
KERlY29tcG9zaXRpb25fUENJRV9BTElHTk1FTlQgPCAxKSA/IDE2IDogRGVjb21wb3NpdGlvbl9Q
Q0lFX0FMSUdOTUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IERl
Y29tcG9zaXRpb25fY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3Qg
cG9pbnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gRGVjb21wb3NpdGlv
bl9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXJldHVybiAocG9pbnRlciAlIGFsaWdubWVudCkgPyAx
IDogMDsKfQoKc3RhdGljIHZvaWQgKkRlY29tcG9zaXRpb25fbWFsbG9jX2FsaWduZWQoY29uc3Qg
c2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBEZWNvbXBvc2l0aW9u
X2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhfbWVtYWxpZ24oJnB0ciwgYWxpZ25tZW50LCBz
aXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLSBJbnRlcmZhY2UgZmlyc3RLZXJuZWwgLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgojZGVmaW5lIENIRUNLX0VS
Uk9SU19TVChTVCwgUkVUKSBpZighbWF4X29rKFNULT5lcnJvcnMpKSB7IGlmKG1heF9jb25maWdf
Z2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgeyBm
cHJpbnRmKHN0ZGVyciwgIiVzXG4iLCBtYXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgYWJv
cnQoKTsgfSBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7
IHJldHVybiBSRVQ7IH0gCiNkZWZpbmUgQ0hFQ0tfTlVMTChWQUxVRSwgTUVTU0FHRSwgUkVUKSBp
ZihWQUxVRSA9PSBOVUxMKSB7IGlmIChtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RB
VElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuJXNc
biIsIChzdG9yZWRfZXJyb3IgPT0gTlVMTCkgPyAiIiA6IHN0b3JlZF9lcnJvciwgTUVTU0FHRSk7
IGFib3J0KCk7IH0gc2V0X2Vycm9yKE1FU1NBR0UpOyByZXR1cm4gUkVUOyB9CgogCnR5cGVkZWYg
c3RydWN0IERlY29tcG9zaXRpb25fZmlyc3RLZXJuZWxfY2FsbGJhY2tfc3RyZWFtIHsKCXVpbnQ4
X3QgKnVzZXJfcHRyOwoJdWludDhfdCAqYWxpZ25lZF9wdHI7CglzaXplX3QgICBzaXplOwoJaW50
ICAgICAgaXNfb3V0cHV0Owp9IERlY29tcG9zaXRpb25fZmlyc3RLZXJuZWxfY2FsbGJhY2tfc3Ry
ZWFtX3Q7Cgp0eXBlZGVmIHN0cnVjdCBEZWNvbXBvc2l0aW9uX2ZpcnN0S2VybmVsX2NhbGxiYWNr
X2RhdGEgewoJRGVjb21wb3NpdGlvbl9maXJzdEtlcm5lbF9jYWxsYmFja19zdHJlYW1fdCBzdHJl
YW1bNV07IAoJaW50IGNvdW50OwoJaW50IG1heF9jb3VudDsKfSBEZWNvbXBvc2l0aW9uX2ZpcnN0
S2VybmVsX2NhbGxiYWNrX2RhdGFfdDsKCnN0YXRpYyB2b2lkIERlY29tcG9zaXRpb25fZmlyc3RL
ZXJuZWxfY2FsbGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJRGVjb21wb3NpdGlvbl9m
aXJzdEtlcm5lbF9jYWxsYmFja19kYXRhX3QgKmRhdGEgPSAoRGVjb21wb3NpdGlvbl9maXJzdEtl
cm5lbF9jYWxsYmFja19kYXRhX3QqKSBjYl9kYXRhOwoJZm9yIChpbnQgaSA9IDAgOyBpIDwgZGF0
YS0+Y291bnQgOyBpKysgKSB7CgkJRGVjb21wb3NpdGlvbl9maXJzdEtlcm5lbF9jYWxsYmFja19z
dHJlYW1fdCAqcyA9ICZkYXRhLT5zdHJlYW1baV07CgkJaWYgKHMtPmlzX291dHB1dCAmJiAocy0+
c2l6ZSA+IDApKSB7CgkJCW1lbWNweShzLT51c2VyX3B0ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNp
emUpOwoJCX0KCQlmcmVlKHMtPmFsaWduZWRfcHRyKTsKCX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRp
YyBtYXhfYWN0aW9uc190KiBEZWNvbXBvc2l0aW9uX2ZpcnN0S2VybmVsX2NvbnZlcnRfaW50ZXJu
YWwoCgltYXhfZmlsZV90ICptYXhmaWxlLAoJRGVjb21wb3NpdGlvbl9maXJzdEtlcm5lbF9hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zLAoJaW50ICBpc19pbnRlcm5hbF9jYWxsLAoJdm9pZCAo
KipjYWxsYmFja19mdW5jKSh2b2lkKiksCgl2b2lkICoqY2FsbGJhY2tfZGF0YSkKewoJbWF4X2Fj
dGlvbnNfdCAqYWN0aW9ucyA9IG1heF9hY3Rpb25zX2luaXQobWF4ZmlsZSwgTlVMTCk7CglpZihh
Y3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoKI2RlZmluZSBDSEVDS19FUlJPUlMgaWYoIW1h
eF9vayhhY3Rpb25zLT5lcnJvcnMpKSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3Ry
YWNlKGFjdGlvbnMtPmVycm9ycykpOyByZXR1cm4gTlVMTDsgfSAKCglEZWNvbXBvc2l0aW9uX2Zp
cnN0S2VybmVsX2NhbGxiYWNrX2RhdGFfdCAqY2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxi
YWNrID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVMTCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7
CglpZiAodXNlX2NhbGxiYWNrKSB7CgkJY2JfZGF0YSA9IG1hbGxvYyhzaXplb2YoRGVjb21wb3Np
dGlvbl9maXJzdEtlcm5lbF9jYWxsYmFja19kYXRhX3QpKTsKCQlpZiAoY2JfZGF0YSA9PSBOVUxM
KSB7CgkJCWZwcmludGYoc3RkZXJyLCAiVW5hYmxlIHRvIGFsbG9jYXRlIG1lbW9yeSBmb3Igc3Ry
ZWFtIGNhbGxiYWNrIGRhdGEgaW4gZnVuY3Rpb24gRGVjb21wb3NpdGlvbl9maXJzdEtlcm5lbF9j
b252ZXJ0X2ludGVybmFsXG4iKTsKCQkJcmV0dXJuIE5VTEw7CgkJfQoJCWNiX2RhdGEtPm1heF9j
b3VudCA9IDU7CgkJY2JfZGF0YS0+Y291bnQgICAgID0gMDsKCQkqY2FsbGJhY2tfZGF0YSAgICAg
PSBjYl9kYXRhOwoJCSpjYWxsYmFja19mdW5jICAgICA9ICZEZWNvbXBvc2l0aW9uX2ZpcnN0S2Vy
bmVsX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCWludDY0X3QgcGFyYW1fbiA9IGludGVyZmFjZV9h
Y3Rpb25zLT5wYXJhbV9uOwoJCglpbnQzMl90IHBhcmFtX0RlY29tcG9zaXRpb25LZXJuZWwxX2xv
b3BMZW5ndGggPSBtYXhfZ2V0X29mZnNldF9hdXRvX2xvb3Bfc2l6ZSggYWN0aW9ucywgIkRlY29t
cG9zaXRpb25LZXJuZWwxIiwgImxvb3BMZW5ndGgiICk7CgkKCgkvKiB0ZW1wb3JhcnkgdmFyaWFi
bGVzICovCglpbnQ2NF90IHRtcF8wID0gKChwYXJhbV9uICsgKHBhcmFtX24gJSAyKSkgKiA4KTsK
CWludDY0X3QgdG1wXzEgPSAoKHBhcmFtX24gKyAocGFyYW1fbiAlIDIpKSAqIHBhcmFtX0RlY29t
cG9zaXRpb25LZXJuZWwxX2xvb3BMZW5ndGgpOwoKCS8qIGNvZGUgZm9yIHNjYWxhciBEZWNvbXBv
c2l0aW9uS2VybmVsMS5ydW5fY3ljbGVfY291bnQgKi8KCXVpbnQ2NF90IHRpY2tzX0RlY29tcG9z
aXRpb25LZXJuZWwxID0gdG1wXzE7CgltYXhfc2V0X3RpY2tzKGFjdGlvbnMsICJEZWNvbXBvc2l0
aW9uS2VybmVsMSIsIHRtcF8xKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBz
Y2FsYXIgRGVjb21wb3NpdGlvbktlcm5lbDEucnVuX2N5Y2xlX2NvdW50Ki8KCQoJbWF4X2lnbm9y
ZV9zY2FsYXIoYWN0aW9ucywgIkRlY29tcG9zaXRpb25LZXJuZWwyIiwgInJ1bl9jeWNsZV9jb3Vu
dCIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJLyogY29kZSBmb3Igc2NhbGFyIERlY29tcG9zaXRpb25L
ZXJuZWwxLm4gKi8KCXVpbnQ2NF90IGluc2NhbGFyX0RlY29tcG9zaXRpb25LZXJuZWwxX24gPSBw
YXJhbV9uOwoJbWF4X3NldF91aW50NjR0KGFjdGlvbnMsICJEZWNvbXBvc2l0aW9uS2VybmVsMSIs
ICJuIiwgaW5zY2FsYXJfRGVjb21wb3NpdGlvbktlcm5lbDFfbik7CglDSEVDS19FUlJPUlM7Cgkv
KiBlbmQgb2YgY29kZSBmb3Igc2NhbGFyIERlY29tcG9zaXRpb25LZXJuZWwxLm4qLwoJCgltYXhf
aWdub3JlX3NjYWxhcihhY3Rpb25zLCAiRGVjb21wb3NpdGlvbktlcm5lbDIiLCAibiIgKTsKCUNI
RUNLX0VSUk9SUzsKCQoJLyogY29kZSBmb3Igc3RyZWFtIGlucHV0MSAqLwoJc2l6ZV90IGluc3Ry
ZWFtX3NpemVfaW5wdXQxID0gdG1wXzA7CglpZiAoaW5zdHJlYW1fc2l6ZV9pbnB1dDEgPiAwKSB7
CgkJY29uc3QgZG91YmxlICpzdHJlYW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFt
X2lucHV0MTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IERlY29tcG9zaXRpb25fY2hlY2tf
YWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5wdXQxKSkpIHsKCQkJZG91Ymxl
ICphbGlnbmVkX2luc3RyZWFtX2lucHV0MSA9IG1hbGxvYyhpbnN0cmVhbV9zaXplX2lucHV0MSk7
CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX2lucHV0MSA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0
X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZh
aWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Igc3RyZWFtICdpbnB1dDEnIik7CgkJ
CQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRd
KS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9p
bnB1dDE7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRy
ID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX2lucHV0MTsKCQkJKCZjYl9kYXRhLT5zdHJl
YW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVhbV9zaXplX2lucHV0MTsK
CQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAgPSAwOwoJ
CQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQltZW1jcHkoYWxpZ25lZF9pbnN0cmVhbV9pbnB1dDEs
IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbnB1dDEsIGluc3RyZWFtX3NpemVfaW5wdXQx
KTsKCQkJc3RyZWFtX3B0ciA9IGFsaWduZWRfaW5zdHJlYW1faW5wdXQxOwoJCX0KCQltYXhfcXVl
dWVfaW5wdXQoYWN0aW9ucywgImlucHV0MSIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfaW5w
dXQxKTsKCQlDSEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIGlucHV0
MSAqLwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAiaW5wdXQyIiApOwoJQ0hFQ0tfRVJS
T1JTOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gdiAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVfdiA9
IHRtcF8wOwoJaWYgKGluc3RyZWFtX3NpemVfdiA+IDApIHsKCQljb25zdCBkb3VibGUgKnN0cmVh
bV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fdjsKCQlpZiAodXNlX2NhbGxiYWNr
ICYmICgxID09IERlY29tcG9zaXRpb25fY2hlY2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+
aW5zdHJlYW1fdikpKSB7CgkJCWRvdWJsZSAqYWxpZ25lZF9pbnN0cmVhbV92ID0gbWFsbG9jKGlu
c3RyZWFtX3NpemVfdik7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX3YgPT0gTlVMTCkgewoJCQkJ
bWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9f
LCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVhbSAndici
KTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3Ry
ZWFtX3Y7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRy
ID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX3Y7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2Ni
X2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5zdHJlYW1fc2l6ZV92OwoJCQkoJmNiX2Rh
dGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEt
PmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX3YsIGludGVyZmFjZV9hY3Rp
b25zLT5pbnN0cmVhbV92LCBpbnN0cmVhbV9zaXplX3YpOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25l
ZF9pbnN0cmVhbV92OwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgInYiLCBzdHJlYW1f
cHRyLCBpbnN0cmVhbV9zaXplX3YpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2Rl
IGZvciBzdHJlYW0gdiAqLwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gb3V0cHV0MSAqLwoJc2l6ZV90
IG91dHN0cmVhbV9zaXplX291dHB1dDEgPSAxNjsKCWlmIChvdXRzdHJlYW1fc2l6ZV9vdXRwdXQx
ID4gMCkgewoJCWRvdWJsZSAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJl
YW1fb3V0cHV0MTsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IERlY29tcG9zaXRpb25fY2hl
Y2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dHB1dDEpKSkgewoJCQlk
b3VibGUgKmFsaWduZWRfb3V0c3RyZWFtX291dHB1dDEgPSBtYWxsb2Mob3V0c3RyZWFtX3NpemVf
b3V0cHV0MSk7CgkJCWlmIChhbGlnbmVkX291dHN0cmVhbV9vdXRwdXQxID09IE5VTEwpIHsKCQkJ
CW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVf
XywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ291
dHB1dDEnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2Jf
ZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFjZV9hY3Rpb25z
LT5vdXRzdHJlYW1fb3V0cHV0MTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRd
KS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfb3V0c3RyZWFtX291dHB1dDE7CgkJ
CSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gb3V0c3Ry
ZWFtX3NpemVfb3V0cHV0MTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+
aXNfb3V0cHV0ICAgPSAxOwoJCQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQlzdHJlYW1fcHRyID0g
YWxpZ25lZF9vdXRzdHJlYW1fb3V0cHV0MTsKCQl9CgkJbWF4X3F1ZXVlX291dHB1dChhY3Rpb25z
LCAib3V0cHV0MSIsIHN0cmVhbV9wdHIsIG91dHN0cmVhbV9zaXplX291dHB1dDEpOwoJCUNIRUNL
X0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gb3V0cHV0MSAqLwoJCgltYXhf
aWdub3JlX3N0cmVhbShhY3Rpb25zLCAib3V0cHV0MiIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJaWYg
KHVzZV9jYWxsYmFjayAmJiBjYl9kYXRhLT5jb3VudCA9PSAwKSB7CgkJKmNhbGxiYWNrX2RhdGEg
PSBOVUxMOwoJCSpjYWxsYmFja19mdW5jID0gTlVMTDsKCQlmcmVlKGNiX2RhdGEpOwoJfQoJcmV0
dXJuIGFjdGlvbnM7CiN1bmRlZiBDSEVDS19FUlJPUlMKfQoKdm9pZCBEZWNvbXBvc2l0aW9uX2Zp
cnN0S2VybmVsKAoJaW50NjRfdCBwYXJhbV9uLAoJY29uc3QgZG91YmxlICppbnN0cmVhbV9pbnB1
dDEsCgljb25zdCBkb3VibGUgKmluc3RyZWFtX3YsCglkb3VibGUgKm91dHN0cmVhbV9vdXRwdXQx
KQp7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBEZWNvbXBv
c2l0aW9uX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxl
IHdhcyBub3QgbG9hZGVkIiwgKTsKCW1heF9ydW5fdCAqcnVuID0gRGVjb21wb3NpdGlvbl9maXJz
dEtlcm5lbF9ub25ibG9jayhwYXJhbV9uLCBpbnN0cmVhbV9pbnB1dDEsIGluc3RyZWFtX3YsIG91
dHN0cmVhbV9vdXRwdXQxKTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25z
IiwgKTsKCW1heF93YWl0KHJ1bik7Cn0KCm1heF9ydW5fdCAqRGVjb21wb3NpdGlvbl9maXJzdEtl
cm5lbF9ub25ibG9jaygKCWludDY0X3QgcGFyYW1fbiwKCWNvbnN0IGRvdWJsZSAqaW5zdHJlYW1f
aW5wdXQxLAoJY29uc3QgZG91YmxlICppbnN0cmVhbV92LAoJZG91YmxlICpvdXRzdHJlYW1fb3V0
cHV0MSkKewoJRGVjb21wb3NpdGlvbl9maXJzdEtlcm5lbF9hY3Rpb25zX3QgaW50ZXJmYWNlX2Fj
dGlvbnM7CglpbnRlcmZhY2VfYWN0aW9ucy5wYXJhbV9uID0gcGFyYW1fbjsKCWludGVyZmFjZV9h
Y3Rpb25zLmluc3RyZWFtX2lucHV0MSA9IGluc3RyZWFtX2lucHV0MTsKCWludGVyZmFjZV9hY3Rp
b25zLmluc3RyZWFtX3YgPSBpbnN0cmVhbV92OwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c3RyZWFt
X291dHB1dDEgPSBvdXRzdHJlYW1fb3V0cHV0MTsKCSh2b2lkKSBwdGhyZWFkX29uY2UoJnNsaWNf
YnNfaXNfaW5pdGlhbGlzZWQsIERlY29tcG9zaXRpb25fc3RhdGljX2luaXQpOwoJQ0hFQ0tfTlVM
TChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQiLCBOVUxMKTsKCXZvaWQg
KCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAgKmNiX2RhdGEgICAgICAgICA9IE5VTEw7
CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gRGVjb21wb3NpdGlvbl9maXJzdEtlcm5lbF9jb252
ZXJ0X2ludGVybmFsKHN0b3JlZF9tYXhmaWxlLCAmaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9m
dW5jLCAmY2JfZGF0YSk7CglDSEVDS19OVUxMKGFjdGlvbnMsICJVbmFibGUgdG8gYnVpbGQgYWN0
aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJQ0hFQ0tfRVJST1JTX1NUKGFj
dGlvbnMsIE5VTEwpOwoJQ0hFQ0tfRVJST1JTX1NUKHN0b3JlZF9lbmdpbmUsIE5VTEwpOwoJbWF4
X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25i
bG9jayhzdG9yZWRfZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9u
b25ibG9ja193aXRoX2NiKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEp
OwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCUNI
RUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7
CglyZXR1cm4gcnVuOwp9Cgp2b2lkIERlY29tcG9zaXRpb25fZmlyc3RLZXJuZWxfcnVuKAoJbWF4
X2VuZ2luZV90ICplbmdpbmUsCglEZWNvbXBvc2l0aW9uX2ZpcnN0S2VybmVsX2FjdGlvbnNfdCAq
aW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9ydW5fdCAqcnVuID0gRGVjb21wb3NpdGlvbl9maXJz
dEtlcm5lbF9ydW5fbm9uYmxvY2soZW5naW5lLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19O
VUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9Cgpt
YXhfcnVuX3QgKkRlY29tcG9zaXRpb25fZmlyc3RLZXJuZWxfcnVuX25vbmJsb2NrKAoJbWF4X2Vu
Z2luZV90ICplbmdpbmUsCglEZWNvbXBvc2l0aW9uX2ZpcnN0S2VybmVsX2FjdGlvbnNfdCAqaW50
ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5naW5lX2dldF9t
YXhfZmlsZShlbmdpbmUpOyAKCXZvaWQgKCpjYl9mdW5jKSh2b2lkKikgPSBOVUxMOwoJdm9pZCAg
KmNiX2RhdGEgICAgICAgICA9IE5VTEw7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gRGVjb21w
b3NpdGlvbl9maXJzdEtlcm5lbF9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFjZV9h
Y3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMs
IE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBOVUxMKSB7CgkJcnVuID0g
bWF4X3J1bl9ub25ibG9jayhlbmdpbmUsIGFjdGlvbnMpOwoJfSBlbHNlIHsKCQlydW4gPSBtYXhf
cnVuX25vbmJsb2NrX3dpdGhfY2IoZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsK
CX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CgltYXhf
YWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgR3Jv
dXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZmlyc3RL
ZXJuZWwnLgogKiAKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0g
W2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUg
YWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAuCiAqLwp2
b2lkIERlY29tcG9zaXRpb25fZmlyc3RLZXJuZWxfcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91
cCwgRGVjb21wb3NpdGlvbl9maXJzdEtlcm5lbF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25z
KQp7CgltYXhfcnVuX3QgKnJ1biA9IERlY29tcG9zaXRpb25fZmlyc3RLZXJuZWxfcnVuX2dyb3Vw
X25vbmJsb2NrKGdyb3VwLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVu
YWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmll
ZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhl
IGludGVyZmFjZSAnZmlyc3RLZXJuZWwnLgogKiAKICoKICogU2NoZWR1bGUgdGhlIGFjdGlvbnMg
dG8gcnVuIG9uIHRoZSBmaXJzdCBkZXZpY2UgYXZhaWxhYmxlIGluIHRoZSBncm91cCBhbmQgcmV0
dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gbXVzdCBiZSBjaGVja2Vk
IHdpdGggOjptYXhfd2FpdC4gCiAqIE5vdGUgdGhhdCB1c2Ugb2YgOjptYXhfbm93YWl0IGlzIHBy
b2hpYml0ZWQgd2l0aCBub24tYmxvY2tpbmcgcnVubmluZyBvbiBncm91cHM6CiAqIHNlZSB0aGUg
OjptYXhfcnVuX2dyb3VwX25vbmJsb2NrIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZXhwbGFuYXRp
b24uCiAqCiAqIFxwYXJhbSBbaW5dIGdyb3VwIEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbl0g
aW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqIFxyZXR1cm4gQSBoYW5kbGUgb24g
dGhlIGV4ZWN1dGlvbiBzdGF0dXMgb2YgdGhlIGFjdGlvbnMsIG9yIE5VTEwgaW4gY2FzZSBvZiBl
cnJvci4KICovCm1heF9ydW5fdCAqRGVjb21wb3NpdGlvbl9maXJzdEtlcm5lbF9ydW5fZ3JvdXBf
bm9uYmxvY2sobWF4X2dyb3VwX3QgKmdyb3VwLCBEZWNvbXBvc2l0aW9uX2ZpcnN0S2VybmVsX2Fj
dGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhf
Z3JvdXBfZ2V0X21heF9maWxlKGdyb3VwKTsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBEZWNv
bXBvc2l0aW9uX2ZpcnN0S2VybmVsX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNl
X2FjdGlvbnMsIDEsIE5VTEwsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVM
TDsKCWlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgcmV0dXJuIE5VTEw7CgltYXhfdmFsaWRh
dGUoYWN0aW9ucyk7CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fZ3JvdXBfbm9uYmxvY2soZ3Jv
dXAsIGFjdGlvbnMpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0K
CgovKioKICogXGJyaWVmIEFycmF5IHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRo
ZSBpbnRlcmZhY2UgJ2ZpcnN0S2VybmVsJy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRo
ZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9h
Y3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBv
ZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZh
Y2VfYWN0aW9ucwogKiBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBE
ZWNvbXBvc2l0aW9uX2ZpcnN0S2VybmVsX3J1bl9hcnJheShtYXhfZW5nYXJyYXlfdCAqZW5nYXJy
YXksIERlY29tcG9zaXRpb25fZmlyc3RLZXJuZWxfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9u
c1tdKQp7CgltYXhfcnVuX3QgKnJ1biA9IERlY29tcG9zaXRpb25fZmlyc3RLZXJuZWxfcnVuX2Fy
cmF5X25vbmJsb2NrKGVuZ2FycmF5LCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1
biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAq
IFxicmllZiBBcnJheSBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBm
b3IgdGhlIGludGVyZmFjZSAnZmlyc3RLZXJuZWwnLgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVu
IHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJu
IGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0
Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUg
Y2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBvciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhh
dCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxlZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9y
eSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBv
ZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFy
cmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRp
b24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwpt
YXhfcnVuX3QgKkRlY29tcG9zaXRpb25fZmlyc3RLZXJuZWxfcnVuX2FycmF5X25vbmJsb2NrKG1h
eF9lbmdhcnJheV90ICplbmdhcnJheSwgRGVjb21wb3NpdGlvbl9maXJzdEtlcm5lbF9hY3Rpb25z
X3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5n
YXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3Qg
KmFjdGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJ
aWYgKGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9h
Y3Rpb25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7
Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25z
X3QgKmFjdGlvbnMgPSBEZWNvbXBvc2l0aW9uX2ZpcnN0S2VybmVsX2NvbnZlcnRfaW50ZXJuYWwo
bWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0sIDEsIE5VTEwsIE5VTEwpOwoJCWlmIChhY3Rp
b25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rpb25zW2ldID0gYWN0aW9uczsKCQlt
YXhfc2V0X2FjdGlvbihhY3RhcnJheSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhfcnVuX3QgKnJ1biA9
IG1heF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGFjdGFycmF5KTsKCWZvciAoIGkgPSAw
IDsgaSA8IGFjdGFycmF5LT5zaXplIDsgaSsrICkgeyBtYXhfYWN0aW9uc19mcmVlKGFycl9hY3Rp
b25zW2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYWN0YXJyYXkpOwoJZnJlZShhcnJfYWN0aW9u
cyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0cyBhIHN0YXRpYy1pbnRl
cmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1pbnRlcmZhY2UgbWF4X2FjdGlvbnNf
dCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGludGVybmFsIHV0aWxpdHkgZnVu
Y3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRpYyBpbnRlcmZhY2UuCiAq
CiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUgdG8gdXNlLgogKiBccGFyYW0gW2lu
XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNwZWNpZmljIGFjdGlvbnMgdG8gcnVu
LgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBhY3Rpb25zIHRvIHJ1biwgb3IgTlVM
TCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNfdCogRGVjb21wb3NpdGlvbl9maXJz
dEtlcm5lbF9jb252ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIERlY29tcG9zaXRpb25fZmlyc3RL
ZXJuZWxfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJcmV0dXJuIERlY29tcG9zaXRp
b25fZmlyc3RLZXJuZWxfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9u
cywgMCwgTlVMTCwgTlVMTCk7Cn0KCiN1bmRlZiBDSEVDS19FUlJPUlNfU1QKI3VuZGVmIENIRUNL
X05VTEwKCgoKCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0gSW50ZXJmYWNlIHNlY29uZEtlcm5lbCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSov
Ci8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoKI2RlZmluZSBDSEVDS19FUlJPUlNfU1QoU1QsIFJF
VCkgaWYoIW1heF9vayhTVC0+ZXJyb3JzKSkgeyBpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIs
ICIlc1xuIiwgbWF4X2Vycm9yc190cmFjZShTVC0+ZXJyb3JzKSk7IGFib3J0KCk7IH0gc2V0X2Vy
cm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UoU1QtPmVycm9ycykpOyByZXR1cm4gUkVUOyB9
IAojZGVmaW5lIENIRUNLX05VTEwoVkFMVUUsIE1FU1NBR0UsIFJFVCkgaWYoVkFMVUUgPT0gTlVM
TCkgeyBpZiAobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0Vf
QUJPUlRfT05fRVJST1IpKSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiVzXG4iLCAoc3RvcmVkX2Vy
cm9yID09IE5VTEwpID8gIiIgOiBzdG9yZWRfZXJyb3IsIE1FU1NBR0UpOyBhYm9ydCgpOyB9IHNl
dF9lcnJvcihNRVNTQUdFKTsgcmV0dXJuIFJFVDsgfQoKIAp0eXBlZGVmIHN0cnVjdCBEZWNvbXBv
c2l0aW9uX3NlY29uZEtlcm5lbF9jYWxsYmFja19zdHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7
Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNpemVfdCAgIHNpemU7CglpbnQgICAgICBpc19vdXRw
dXQ7Cn0gRGVjb21wb3NpdGlvbl9zZWNvbmRLZXJuZWxfY2FsbGJhY2tfc3RyZWFtX3Q7Cgp0eXBl
ZGVmIHN0cnVjdCBEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9jYWxsYmFja19kYXRhIHsKCURl
Y29tcG9zaXRpb25fc2Vjb25kS2VybmVsX2NhbGxiYWNrX3N0cmVhbV90IHN0cmVhbVs1XTsgCglp
bnQgY291bnQ7CglpbnQgbWF4X2NvdW50Owp9IERlY29tcG9zaXRpb25fc2Vjb25kS2VybmVsX2Nh
bGxiYWNrX2RhdGFfdDsKCnN0YXRpYyB2b2lkIERlY29tcG9zaXRpb25fc2Vjb25kS2VybmVsX2Nh
bGxiYWNrX2ludGVybmFsKHZvaWQgKmNiX2RhdGEpCnsKCURlY29tcG9zaXRpb25fc2Vjb25kS2Vy
bmVsX2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9j
YWxsYmFja19kYXRhX3QqKSBjYl9kYXRhOwoJZm9yIChpbnQgaSA9IDAgOyBpIDwgZGF0YS0+Y291
bnQgOyBpKysgKSB7CgkJRGVjb21wb3NpdGlvbl9zZWNvbmRLZXJuZWxfY2FsbGJhY2tfc3RyZWFt
X3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChzLT5pc19vdXRwdXQgJiYgKHMtPnNpemUg
PiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMtPmFsaWduZWRfcHRyLCBzLT5zaXplKTsK
CQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9CglmcmVlKGRhdGEpOwp9CgpzdGF0aWMgbWF4
X2FjdGlvbnNfdCogRGVjb21wb3NpdGlvbl9zZWNvbmRLZXJuZWxfY29udmVydF9pbnRlcm5hbCgK
CW1heF9maWxlX3QgKm1heGZpbGUsCglEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9hY3Rpb25z
X3QgKmludGVyZmFjZV9hY3Rpb25zLAoJaW50ICBpc19pbnRlcm5hbF9jYWxsLAoJdm9pZCAoKipj
YWxsYmFja19mdW5jKSh2b2lkKiksCgl2b2lkICoqY2FsbGJhY2tfZGF0YSkKewoJbWF4X2FjdGlv
bnNfdCAqYWN0aW9ucyA9IG1heF9hY3Rpb25zX2luaXQobWF4ZmlsZSwgTlVMTCk7CglpZihhY3Rp
b25zID09IE5VTEwpIHJldHVybiBOVUxMOwoKI2RlZmluZSBDSEVDS19FUlJPUlMgaWYoIW1heF9v
ayhhY3Rpb25zLT5lcnJvcnMpKSB7IHNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNl
KGFjdGlvbnMtPmVycm9ycykpOyByZXR1cm4gTlVMTDsgfSAKCglEZWNvbXBvc2l0aW9uX3NlY29u
ZEtlcm5lbF9jYWxsYmFja19kYXRhX3QgKmNiX2RhdGEgPSBOVUxMOwoJaW50IHVzZV9jYWxsYmFj
ayA9IChjYWxsYmFja19mdW5jICE9IE5VTEwpICYmIChjYWxsYmFja19kYXRhICE9IE5VTEwpOwoJ
aWYgKHVzZV9jYWxsYmFjaykgewoJCWNiX2RhdGEgPSBtYWxsb2Moc2l6ZW9mKERlY29tcG9zaXRp
b25fc2Vjb25kS2VybmVsX2NhbGxiYWNrX2RhdGFfdCkpOwoJCWlmIChjYl9kYXRhID09IE5VTEwp
IHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFibGUgdG8gYWxsb2NhdGUgbWVtb3J5IGZvciBzdHJl
YW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlvbiBEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9j
b252ZXJ0X2ludGVybmFsXG4iKTsKCQkJcmV0dXJuIE5VTEw7CgkJfQoJCWNiX2RhdGEtPm1heF9j
b3VudCA9IDU7CgkJY2JfZGF0YS0+Y291bnQgICAgID0gMDsKCQkqY2FsbGJhY2tfZGF0YSAgICAg
PSBjYl9kYXRhOwoJCSpjYWxsYmFja19mdW5jICAgICA9ICZEZWNvbXBvc2l0aW9uX3NlY29uZEtl
cm5lbF9jYWxsYmFja19pbnRlcm5hbDsKCX0KCglpbnQ2NF90IHBhcmFtX24gPSBpbnRlcmZhY2Vf
YWN0aW9ucy0+cGFyYW1fbjsKCQoKCS8qIHRlbXBvcmFyeSB2YXJpYWJsZXMgKi8KCWludDY0X3Qg
dG1wXzAgPSAoKChwYXJhbV9uICogcGFyYW1fbikgKyAocGFyYW1fbiAlIDIpKSAqIDgpOwoJaW50
NjRfdCB0bXBfMSA9ICgocGFyYW1fbiAqIHBhcmFtX24pICsgKHBhcmFtX24gJSAyKSk7CgoJbWF4
X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgIkRlY29tcG9zaXRpb25LZXJuZWwxIiwgInJ1bl9jeWNs
ZV9jb3VudCIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJLyogY29kZSBmb3Igc2NhbGFyIERlY29tcG9z
aXRpb25LZXJuZWwyLnJ1bl9jeWNsZV9jb3VudCAqLwoJdWludDY0X3QgdGlja3NfRGVjb21wb3Np
dGlvbktlcm5lbDIgPSB0bXBfMTsKCW1heF9zZXRfdGlja3MoYWN0aW9ucywgIkRlY29tcG9zaXRp
b25LZXJuZWwyIiwgdG1wXzEpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNj
YWxhciBEZWNvbXBvc2l0aW9uS2VybmVsMi5ydW5fY3ljbGVfY291bnQqLwoJCgltYXhfaWdub3Jl
X3NjYWxhcihhY3Rpb25zLCAiRGVjb21wb3NpdGlvbktlcm5lbDEiLCAibiIgKTsKCUNIRUNLX0VS
Uk9SUzsKCQoJLyogY29kZSBmb3Igc2NhbGFyIERlY29tcG9zaXRpb25LZXJuZWwyLm4gKi8KCXVp
bnQ2NF90IGluc2NhbGFyX0RlY29tcG9zaXRpb25LZXJuZWwyX24gPSBwYXJhbV9uOwoJbWF4X3Nl
dF91aW50NjR0KGFjdGlvbnMsICJEZWNvbXBvc2l0aW9uS2VybmVsMiIsICJuIiwgaW5zY2FsYXJf
RGVjb21wb3NpdGlvbktlcm5lbDJfbik7CglDSEVDS19FUlJPUlM7CgkvKiBlbmQgb2YgY29kZSBm
b3Igc2NhbGFyIERlY29tcG9zaXRpb25LZXJuZWwyLm4qLwoJCgltYXhfaWdub3JlX3N0cmVhbShh
Y3Rpb25zLCAiaW5wdXQxIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0g
aW5wdXQyICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9pbnB1dDIgPSB0bXBfMDsKCWlmIChpbnN0
cmVhbV9zaXplX2lucHV0MiA+IDApIHsKCQljb25zdCBkb3VibGUgKnN0cmVhbV9wdHIgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5wdXQyOwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEg
PT0gRGVjb21wb3NpdGlvbl9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVh
bV9pbnB1dDIpKSkgewoJCQlkb3VibGUgKmFsaWduZWRfaW5zdHJlYW1faW5wdXQyID0gbWFsbG9j
KGluc3RyZWFtX3NpemVfaW5wdXQyKTsKCQkJaWYgKGFsaWduZWRfaW5zdHJlYW1faW5wdXQyID09
IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklM
RV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZv
ciBzdHJlYW0gJ2lucHV0MiciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEt
PnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJm
YWNlX2FjdGlvbnMtPmluc3RyZWFtX2lucHV0MjsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0
YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfaW5zdHJlYW1faW5w
dXQyOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9
IGluc3RyZWFtX3NpemVfaW5wdXQyOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3Vu
dF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShh
bGlnbmVkX2luc3RyZWFtX2lucHV0MiwgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2lucHV0
MiwgaW5zdHJlYW1fc2l6ZV9pbnB1dDIpOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9pbnN0cmVh
bV9pbnB1dDI7CgkJfQoJCW1heF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAiaW5wdXQyIiwgc3RyZWFt
X3B0ciwgaW5zdHJlYW1fc2l6ZV9pbnB1dDIpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBv
ZiBjb2RlIGZvciBzdHJlYW0gaW5wdXQyICovCgkKCW1heF9pZ25vcmVfc3RyZWFtKGFjdGlvbnMs
ICJ2IiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3N0cmVhbShhY3Rpb25zLCAib3V0
cHV0MSIgKTsKCUNIRUNLX0VSUk9SUzsKCQoJLyogY29kZSBmb3Igc3RyZWFtIG91dHB1dDIgKi8K
CXNpemVfdCBvdXRzdHJlYW1fc2l6ZV9vdXRwdXQyID0gdG1wXzA7CglpZiAob3V0c3RyZWFtX3Np
emVfb3V0cHV0MiA+IDApIHsKCQlkb3VibGUgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9u
cy0+b3V0c3RyZWFtX291dHB1dDI7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBEZWNvbXBv
c2l0aW9uX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9vdXRwdXQy
KSkpIHsKCQkJZG91YmxlICphbGlnbmVkX291dHN0cmVhbV9vdXRwdXQyID0gbWFsbG9jKG91dHN0
cmVhbV9zaXplX291dHB1dDIpOwoJCQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1fb3V0cHV0MiA9PSBO
VUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVf
XywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Ig
c3RyZWFtICdvdXRwdXQyJyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+
c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZh
Y2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dHB1dDI7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2Rh
dGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX291dHN0cmVhbV9v
dXRwdXQyOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAg
ICA9IG91dHN0cmVhbV9zaXplX291dHB1dDI7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEt
PmNvdW50XSktPmlzX291dHB1dCAgID0gMTsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJc3Ry
ZWFtX3B0ciA9IGFsaWduZWRfb3V0c3RyZWFtX291dHB1dDI7CgkJfQoJCW1heF9xdWV1ZV9vdXRw
dXQoYWN0aW9ucywgIm91dHB1dDIiLCBzdHJlYW1fcHRyLCBvdXRzdHJlYW1fc2l6ZV9vdXRwdXQy
KTsKCQlDSEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIG91dHB1dDIg
Ki8KCQoJaWYgKHVzZV9jYWxsYmFjayAmJiBjYl9kYXRhLT5jb3VudCA9PSAwKSB7CgkJKmNhbGxi
YWNrX2RhdGEgPSBOVUxMOwoJCSpjYWxsYmFja19mdW5jID0gTlVMTDsKCQlmcmVlKGNiX2RhdGEp
OwoJfQoJcmV0dXJuIGFjdGlvbnM7CiN1bmRlZiBDSEVDS19FUlJPUlMKfQoKdm9pZCBEZWNvbXBv
c2l0aW9uX3NlY29uZEtlcm5lbCgKCWludDY0X3QgcGFyYW1fbiwKCWNvbnN0IGRvdWJsZSAqaW5z
dHJlYW1faW5wdXQyLAoJZG91YmxlICpvdXRzdHJlYW1fb3V0cHV0MikKewoJKHZvaWQpIHB0aHJl
YWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgRGVjb21wb3NpdGlvbl9zdGF0aWNfaW5p
dCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRlZCIs
ICk7CgltYXhfcnVuX3QgKnJ1biA9IERlY29tcG9zaXRpb25fc2Vjb25kS2VybmVsX25vbmJsb2Nr
KHBhcmFtX24sIGluc3RyZWFtX2lucHV0Miwgb3V0c3RyZWFtX291dHB1dDIpOwoJQ0hFQ0tfTlVM
TChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4
X3J1bl90ICpEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9ub25ibG9jaygKCWludDY0X3QgcGFy
YW1fbiwKCWNvbnN0IGRvdWJsZSAqaW5zdHJlYW1faW5wdXQyLAoJZG91YmxlICpvdXRzdHJlYW1f
b3V0cHV0MikKewoJRGVjb21wb3NpdGlvbl9zZWNvbmRLZXJuZWxfYWN0aW9uc190IGludGVyZmFj
ZV9hY3Rpb25zOwoJaW50ZXJmYWNlX2FjdGlvbnMucGFyYW1fbiA9IHBhcmFtX247CglpbnRlcmZh
Y2VfYWN0aW9ucy5pbnN0cmVhbV9pbnB1dDIgPSBpbnN0cmVhbV9pbnB1dDI7CglpbnRlcmZhY2Vf
YWN0aW9ucy5vdXRzdHJlYW1fb3V0cHV0MiA9IG91dHN0cmVhbV9vdXRwdXQyOwoJKHZvaWQpIHB0
aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgRGVjb21wb3NpdGlvbl9zdGF0aWNf
aW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxvYWRl
ZCIsIE5VTEwpOwoJdm9pZCAoKmNiX2Z1bmMpKHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0
YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBEZWNvbXBvc2l0aW9u
X3NlY29uZEtlcm5lbF9jb252ZXJ0X2ludGVybmFsKHN0b3JlZF9tYXhmaWxlLCAmaW50ZXJmYWNl
X2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19OVUxMKGFjdGlvbnMsICJV
bmFibGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlkYXRlKGFjdGlvbnMpOwoJ
Q0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJQ0hFQ0tfRVJST1JTX1NUKHN0b3JlZF9l
bmdpbmUsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9PSBOVUxMKSB7CgkJ
cnVuID0gbWF4X3J1bl9ub25ibG9jayhzdG9yZWRfZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7
CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKHN0b3JlZF9lbmdpbmUsIGFjdGlvbnMs
IGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFj
dGlvbnMiLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCW1heF9hY3Rp
b25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIERlY29tcG9zaXRpb25fc2Vj
b25kS2VybmVsX3J1bigKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJRGVjb21wb3NpdGlvbl9zZWNv
bmRLZXJuZWxfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4g
PSBEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9ydW5fbm9uYmxvY2soZW5naW5lLCBpbnRlcmZh
Y2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7
CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKkRlY29tcG9zaXRpb25fc2Vjb25kS2VybmVs
X3J1bl9ub25ibG9jaygKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJRGVjb21wb3NpdGlvbl9zZWNv
bmRLZXJuZWxfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4
ZmlsZSA9IG1heF9lbmdpbmVfZ2V0X21heF9maWxlKGVuZ2luZSk7IAoJdm9pZCAoKmNiX2Z1bmMp
KHZvaWQqKSA9IE5VTEw7Cgl2b2lkICAqY2JfZGF0YSAgICAgICAgID0gTlVMTDsKCW1heF9hY3Rp
b25zX3QgKmFjdGlvbnMgPSBEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9jb252ZXJ0X2ludGVy
bmFsKG1heGZpbGUsIGludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJ
Q0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2Jf
ZnVuYyA9PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhlbmdpbmUsIGFjdGlvbnMp
OwoJfSBlbHNlIHsKCQlydW4gPSBtYXhfcnVuX25vbmJsb2NrX3dpdGhfY2IoZW5naW5lLCBhY3Rp
b25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1
biBhY3Rpb25zIiwgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1
bjsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBm
b3IgdGhlIGludGVyZmFjZSAnc2Vjb25kS2VybmVsJy4KICogCiAqIFxwYXJhbSBbaW5dIGdyb3Vw
IEdyb3VwIHRvIHVzZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIEFjdGlv
bnMgdG8gcnVuLgogKgogKiBSdW4gdGhlIGFjdGlvbnMgb24gdGhlIGZpcnN0IGRldmljZSBhdmFp
bGFibGUgaW4gdGhlIGdyb3VwLgogKi8Kdm9pZCBEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9y
dW5fZ3JvdXAobWF4X2dyb3VwX3QgKmdyb3VwLCBEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9h
Y3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IERlY29tcG9z
aXRpb25fc2Vjb25kS2VybmVsX3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgaW50ZXJmYWNlX2Fj
dGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4
X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgR3JvdXAgcnVuIGFkdmFuY2VkIHN0YXRpYyBu
b24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ3NlY29uZEtlcm5lbCcuCiAq
IAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4gb24gdGhlIGZpcnN0IGRldmljZSBh
dmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBzdGF0
dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6Om1heF93YWl0LiAKICogTm90ZSB0
aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRlZCB3aXRoIG5vbi1ibG9ja2luZyBy
dW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9ydW5fZ3JvdXBfbm9uYmxvY2sgZG9j
dW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoKICogXHBhcmFtIFtpbl0gZ3JvdXAg
R3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRv
IHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUg
YWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpEZWNvbXBv
c2l0aW9uX3NlY29uZEtlcm5lbF9ydW5fZ3JvdXBfbm9uYmxvY2sobWF4X2dyb3VwX3QgKmdyb3Vw
LCBEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25z
KQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2dyb3VwX2dldF9tYXhfZmlsZShncm91cCk7
CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gRGVjb21wb3NpdGlvbl9zZWNvbmRLZXJuZWxfY29u
dmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgTlVMTCwgTlVMTCk7
CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJaWYoIW1heF9vayhhY3Rpb25zLT5l
cnJvcnMpKSByZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAq
cnVuID0gbWF4X3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9u
c19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVu
IGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnc2Vjb25kS2VybmVs
Jy4KICogCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVz
ZS4KICogXHBhcmFtIFtpbixvdXRdIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rp
b25zIHRvIHJ1bi4KICoKICogUnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBv
ZiBlbmdpbmVzLiAgVGhlIGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucwogKiBtdXN0IG1hdGNo
IHRoZSBzaXplIG9mIGVuZ2FycmF5LgogKi8Kdm9pZCBEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5l
bF9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBEZWNvbXBvc2l0aW9uX3NlY29u
ZEtlcm5lbF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5fdCAqcnVu
ID0gRGVjb21wb3NpdGlvbl9zZWNvbmRLZXJuZWxfcnVuX2FycmF5X25vbmJsb2NrKGVuZ2FycmF5
LCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0
aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBBcnJheSBydW4gYWR2
YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnc2Vj
b25kS2VybmVsJy4KICogCiAqCiAqIFNjaGVkdWxlIHRvIHJ1biB0aGUgYXJyYXkgb2YgYWN0aW9u
cyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcywgYW5kIHJldHVybiBpbW1lZGlhdGVseS4KICogVGhl
IGxlbmd0aCBvZiBpbnRlcmZhY2VfYWN0aW9ucyBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGVuZ2Fy
cmF5LgogKiBUaGUgc3RhdHVzIG9mIHRoZSBydW4gY2FuIGJlIGNoZWNrZWQgZWl0aGVyIGJ5IDo6
bWF4X3dhaXQgb3IgOjptYXhfbm93YWl0OwogKiBub3RlIHRoYXQgb25lIG9mIHRoZXNlICptdXN0
KiBiZSBjYWxsZWQsIHNvIHRoYXQgYXNzb2NpYXRlZCBtZW1vcnkgY2FuIGJlIHJlbGVhc2VkLgog
KgogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAq
IFxwYXJhbSBbaW5dIGludGVyZmFjZV9hY3Rpb25zIFRoZSBhcnJheSBvZiBhY3Rpb25zIHRvIHJ1
bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0
aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpEZWNvbXBvc2l0
aW9uX3NlY29uZEtlcm5lbF9ydW5fYXJyYXlfbm9uYmxvY2sobWF4X2VuZ2FycmF5X3QgKmVuZ2Fy
cmF5LCBEZWNvbXBvc2l0aW9uX3NlY29uZEtlcm5lbF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rp
b25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5nYXJyYXlfZ2V0X21heF9maWxl
KGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3QgKmFjdGFycmF5ID0gbWF4X2Fj
dGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJaWYgKGFjdGFycmF5ID09IE5V
TEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zID0gbWFsbG9jKGVu
Z2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7Cglmb3IgKCBpID0gMCA7IGkg
PCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBEZWNv
bXBvc2l0aW9uX3NlY29uZEtlcm5lbF9jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVyZmFj
ZV9hY3Rpb25zW2ldLCAxLCBOVUxMLCBOVUxMKTsKCQlpZiAoYWN0aW9ucyA9PSBOVUxMKSByZXR1
cm4gTlVMTDsKCQlhcnJfYWN0aW9uc1tpXSA9IGFjdGlvbnM7CgkJbWF4X3NldF9hY3Rpb24oYWN0
YXJyYXksIGksIGFjdGlvbnMpOwoJfQoJbWF4X3J1bl90ICpydW4gPSBtYXhfcnVuX2FycmF5X25v
bmJsb2NrKGVuZ2FycmF5LCBhY3RhcnJheSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+
c2l6ZSA7IGkrKyApIHsgbWF4X2FjdGlvbnNfZnJlZShhcnJfYWN0aW9uc1tpXSk7IH0KCW1heF9h
Y3RhcnJheV9mcmVlKGFjdGFycmF5KTsKCWZyZWUoYXJyX2FjdGlvbnMpOwoJcmV0dXJuIHJ1bjsK
fQoKCi8qKgogKiBcYnJpZWYgQ29udmVydHMgYSBzdGF0aWMtaW50ZXJmYWNlIGFjdGlvbiBzdHJ1
Y3QgaW50byBhIGR5bmFtaWMtaW50ZXJmYWNlIG1heF9hY3Rpb25zX3Qgc3RydWN0LgogKgogKiBO
b3RlIHRoYXQgdGhpcyBpcyBhbiBpbnRlcm5hbCB1dGlsaXR5IGZ1bmN0aW9uIHVzZWQgYnkgb3Ro
ZXIgZnVuY3Rpb25zIGluIHRoZSBzdGF0aWMgaW50ZXJmYWNlLgogKgogKiBccGFyYW0gW2luXSBt
YXhmaWxlIFRoZSBtYXhmaWxlIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlv
bnMgVGhlIGludGVyZmFjZS1zcGVjaWZpYyBhY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBUaGUg
ZHluYW1pYy1pbnRlcmZhY2UgYWN0aW9ucyB0byBydW4sIG9yIE5VTEwgaW4gY2FzZSBvZiBlcnJv
ci4KICovCm1heF9hY3Rpb25zX3QqIERlY29tcG9zaXRpb25fc2Vjb25kS2VybmVsX2NvbnZlcnQo
bWF4X2ZpbGVfdCAqbWF4ZmlsZSwgRGVjb21wb3NpdGlvbl9zZWNvbmRLZXJuZWxfYWN0aW9uc190
ICppbnRlcmZhY2VfYWN0aW9ucykKewoJcmV0dXJuIERlY29tcG9zaXRpb25fc2Vjb25kS2VybmVs
X2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnMsIDAsIE5VTEwsIE5V
TEwpOwp9CgojdW5kZWYgQ0hFQ0tfRVJST1JTX1NUCiN1bmRlZiBDSEVDS19OVUxMCgoKCgovKi0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJm
YWNlIGRlZmF1bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0qLwoKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTX1NUKFNULCBSRVQpIGlmKCFtYXhfb2so
U1QtPmVycm9ycykpIHsgaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19J
TlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmludGYoc3RkZXJyLCAiJXNcbiIsIG1heF9l
cnJvcnNfdHJhY2UoU1QtPmVycm9ycykpOyBhYm9ydCgpOyB9IHNldF9lcnJvcl9hbmRfZnJlZSht
YXhfZXJyb3JzX3RyYWNlKFNULT5lcnJvcnMpKTsgcmV0dXJuIFJFVDsgfSAKI2RlZmluZSBDSEVD
S19OVUxMKFZBTFVFLCBNRVNTQUdFLCBSRVQpIGlmKFZBTFVFID09IE5VTEwpIHsgaWYgKG1heF9j
b25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9S
KSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4lc1xuIiwgKHN0b3JlZF9lcnJvciA9PSBOVUxMKSA/
ICIiIDogc3RvcmVkX2Vycm9yLCBNRVNTQUdFKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3IoTUVTU0FH
RSk7IHJldHVybiBSRVQ7IH0KCiAKdHlwZWRlZiBzdHJ1Y3QgRGVjb21wb3NpdGlvbl9jYWxsYmFj
a19zdHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNp
emVfdCAgIHNpemU7CglpbnQgICAgICBpc19vdXRwdXQ7Cn0gRGVjb21wb3NpdGlvbl9jYWxsYmFj
a19zdHJlYW1fdDsKCnR5cGVkZWYgc3RydWN0IERlY29tcG9zaXRpb25fY2FsbGJhY2tfZGF0YSB7
CglEZWNvbXBvc2l0aW9uX2NhbGxiYWNrX3N0cmVhbV90IHN0cmVhbVs1XTsgCglpbnQgY291bnQ7
CglpbnQgbWF4X2NvdW50Owp9IERlY29tcG9zaXRpb25fY2FsbGJhY2tfZGF0YV90OwoKc3RhdGlj
IHZvaWQgRGVjb21wb3NpdGlvbl9jYWxsYmFja19pbnRlcm5hbCh2b2lkICpjYl9kYXRhKQp7CglE
ZWNvbXBvc2l0aW9uX2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChEZWNvbXBvc2l0aW9uX2NhbGxi
YWNrX2RhdGFfdCopIGNiX2RhdGE7Cglmb3IgKGludCBpID0gMCA7IGkgPCBkYXRhLT5jb3VudCA7
IGkrKyApIHsKCQlEZWNvbXBvc2l0aW9uX2NhbGxiYWNrX3N0cmVhbV90ICpzID0gJmRhdGEtPnN0
cmVhbVtpXTsKCQlpZiAocy0+aXNfb3V0cHV0ICYmIChzLT5zaXplID4gMCkpIHsKCQkJbWVtY3B5
KHMtPnVzZXJfcHRyLCBzLT5hbGlnbmVkX3B0ciwgcy0+c2l6ZSk7CgkJfQoJCWZyZWUocy0+YWxp
Z25lZF9wdHIpOwoJfQoJZnJlZShkYXRhKTsKfQoKc3RhdGljIG1heF9hY3Rpb25zX3QqIERlY29t
cG9zaXRpb25fY29udmVydF9pbnRlcm5hbCgKCW1heF9maWxlX3QgKm1heGZpbGUsCglEZWNvbXBv
c2l0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMsCglpbnQgIGlzX2ludGVybmFsX2Nh
bGwsCgl2b2lkICgqKmNhbGxiYWNrX2Z1bmMpKHZvaWQqKSwKCXZvaWQgKipjYWxsYmFja19kYXRh
KQp7CgltYXhfYWN0aW9uc190ICphY3Rpb25zID0gbWF4X2FjdGlvbnNfaW5pdChtYXhmaWxlLCBO
VUxMKTsKCWlmKGFjdGlvbnMgPT0gTlVMTCkgcmV0dXJuIE5VTEw7CgojZGVmaW5lIENIRUNLX0VS
Uk9SUyBpZighbWF4X29rKGFjdGlvbnMtPmVycm9ycykpIHsgc2V0X2Vycm9yX2FuZF9mcmVlKG1h
eF9lcnJvcnNfdHJhY2UoYWN0aW9ucy0+ZXJyb3JzKSk7IHJldHVybiBOVUxMOyB9IAoKCURlY29t
cG9zaXRpb25fY2FsbGJhY2tfZGF0YV90ICpjYl9kYXRhID0gTlVMTDsKCWludCB1c2VfY2FsbGJh
Y2sgPSAoY2FsbGJhY2tfZnVuYyAhPSBOVUxMKSAmJiAoY2FsbGJhY2tfZGF0YSAhPSBOVUxMKTsK
CWlmICh1c2VfY2FsbGJhY2spIHsKCQljYl9kYXRhID0gbWFsbG9jKHNpemVvZihEZWNvbXBvc2l0
aW9uX2NhbGxiYWNrX2RhdGFfdCkpOwoJCWlmIChjYl9kYXRhID09IE5VTEwpIHsKCQkJZnByaW50
ZihzdGRlcnIsICJVbmFibGUgdG8gYWxsb2NhdGUgbWVtb3J5IGZvciBzdHJlYW0gY2FsbGJhY2sg
ZGF0YSBpbiBmdW5jdGlvbiBEZWNvbXBvc2l0aW9uX2NvbnZlcnRfaW50ZXJuYWxcbiIpOwoJCQly
ZXR1cm4gTlVMTDsKCQl9CgkJY2JfZGF0YS0+bWF4X2NvdW50ID0gNTsKCQljYl9kYXRhLT5jb3Vu
dCAgICAgPSAwOwoJCSpjYWxsYmFja19kYXRhICAgICA9IGNiX2RhdGE7CgkJKmNhbGxiYWNrX2Z1
bmMgICAgID0gJkRlY29tcG9zaXRpb25fY2FsbGJhY2tfaW50ZXJuYWw7Cgl9CgoJLyogY29kZSBm
b3Igc2NhbGFyIERlY29tcG9zaXRpb25LZXJuZWwxLnJ1bl9jeWNsZV9jb3VudCAqLwoJdWludDY0
X3QgdGlja3NfRGVjb21wb3NpdGlvbktlcm5lbDEgPSBpbnRlcmZhY2VfYWN0aW9ucy0+dGlja3Nf
RGVjb21wb3NpdGlvbktlcm5lbDE7CgltYXhfc2V0X3RpY2tzKGFjdGlvbnMsICJEZWNvbXBvc2l0
aW9uS2VybmVsMSIsIHRpY2tzX0RlY29tcG9zaXRpb25LZXJuZWwxKTsKCUNIRUNLX0VSUk9SUzsK
CS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgRGVjb21wb3NpdGlvbktlcm5lbDEucnVuX2N5Y2xl
X2NvdW50Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFyIERlY29tcG9zaXRpb25LZXJuZWwyLnJ1bl9j
eWNsZV9jb3VudCAqLwoJdWludDY0X3QgdGlja3NfRGVjb21wb3NpdGlvbktlcm5lbDIgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+dGlja3NfRGVjb21wb3NpdGlvbktlcm5lbDI7CgltYXhfc2V0X3RpY2tz
KGFjdGlvbnMsICJEZWNvbXBvc2l0aW9uS2VybmVsMiIsIHRpY2tzX0RlY29tcG9zaXRpb25LZXJu
ZWwyKTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgRGVjb21wb3Np
dGlvbktlcm5lbDIucnVuX2N5Y2xlX2NvdW50Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFyIERlY29t
cG9zaXRpb25LZXJuZWwxLm4gKi8KCXVpbnQ2NF90IGluc2NhbGFyX0RlY29tcG9zaXRpb25LZXJu
ZWwxX24gPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJfRGVjb21wb3NpdGlvbktlcm5lbDFf
bjsKCW1heF9zZXRfdWludDY0dChhY3Rpb25zLCAiRGVjb21wb3NpdGlvbktlcm5lbDEiLCAibiIs
IGluc2NhbGFyX0RlY29tcG9zaXRpb25LZXJuZWwxX24pOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5k
IG9mIGNvZGUgZm9yIHNjYWxhciBEZWNvbXBvc2l0aW9uS2VybmVsMS5uKi8KCQoJLyogY29kZSBm
b3Igc2NhbGFyIERlY29tcG9zaXRpb25LZXJuZWwyLm4gKi8KCXVpbnQ2NF90IGluc2NhbGFyX0Rl
Y29tcG9zaXRpb25LZXJuZWwyX24gPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zY2FsYXJfRGVjb21w
b3NpdGlvbktlcm5lbDJfbjsKCW1heF9zZXRfdWludDY0dChhY3Rpb25zLCAiRGVjb21wb3NpdGlv
bktlcm5lbDIiLCAibiIsIGluc2NhbGFyX0RlY29tcG9zaXRpb25LZXJuZWwyX24pOwoJQ0hFQ0tf
RVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBEZWNvbXBvc2l0aW9uS2VybmVsMi5u
Ki8KCQoJLyogY29kZSBmb3Igc3RyZWFtIGlucHV0MSAqLwoJc2l6ZV90IGluc3RyZWFtX3NpemVf
aW5wdXQxID0gaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3NpemVfaW5wdXQxOwoJaWYgKGlu
c3RyZWFtX3NpemVfaW5wdXQxID4gMCkgewoJCWNvbnN0IHZvaWQgKnN0cmVhbV9wdHIgPSBpbnRl
cmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1faW5wdXQxOwoJCWlmICh1c2VfY2FsbGJhY2sgJiYgKDEg
PT0gRGVjb21wb3NpdGlvbl9jaGVja19hbGlnbmVkKGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVh
bV9pbnB1dDEpKSkgewoJCQl2b2lkICphbGlnbmVkX2luc3RyZWFtX2lucHV0MSA9IG1hbGxvYyhp
bnN0cmVhbV9zaXplX2lucHV0MSk7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX2lucHV0MSA9PSBO
VUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVf
XywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Ig
c3RyZWFtICdpbnB1dDEnIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5z
dHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFj
ZV9hY3Rpb25zLT5pbnN0cmVhbV9pbnB1dDE7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEt
PmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX2lucHV0
MTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBp
bnN0cmVhbV9zaXplX2lucHV0MTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRd
KS0+aXNfb3V0cHV0ICAgPSAwOwoJCQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQltZW1jcHkoYWxp
Z25lZF9pbnN0cmVhbV9pbnB1dDEsIGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbnB1dDEs
IGluc3RyZWFtX3NpemVfaW5wdXQxKTsKCQkJc3RyZWFtX3B0ciA9IGFsaWduZWRfaW5zdHJlYW1f
aW5wdXQxOwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywgImlucHV0MSIsIHN0cmVhbV9w
dHIsIGluc3RyZWFtX3NpemVfaW5wdXQxKTsKCQlDSEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2Yg
Y29kZSBmb3Igc3RyZWFtIGlucHV0MSAqLwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gaW5wdXQyICov
CglzaXplX3QgaW5zdHJlYW1fc2l6ZV9pbnB1dDIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJl
YW1fc2l6ZV9pbnB1dDI7CglpZiAoaW5zdHJlYW1fc2l6ZV9pbnB1dDIgPiAwKSB7CgkJY29uc3Qg
dm9pZCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9pbnB1dDI7CgkJ
aWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBEZWNvbXBvc2l0aW9uX2NoZWNrX2FsaWduZWQoaW50
ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2lucHV0MikpKSB7CgkJCXZvaWQgKmFsaWduZWRfaW5z
dHJlYW1faW5wdXQyID0gbWFsbG9jKGluc3RyZWFtX3NpemVfaW5wdXQyKTsKCQkJaWYgKGFsaWdu
ZWRfaW5zdHJlYW1faW5wdXQyID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhh
Y3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9j
YXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ2lucHV0MiciKTsKCQkJCUNIRUNLX0VSUk9S
UzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAg
ICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX2lucHV0MjsKCQkJKCZj
Yl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCop
IGFsaWduZWRfaW5zdHJlYW1faW5wdXQyOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5j
b3VudF0pLT5zaXplICAgICAgICA9IGluc3RyZWFtX3NpemVfaW5wdXQyOwoJCQkoJmNiX2RhdGEt
PnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDA7CgkJCWNiX2RhdGEtPmNv
dW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX2lucHV0MiwgaW50ZXJmYWNlX2Fj
dGlvbnMtPmluc3RyZWFtX2lucHV0MiwgaW5zdHJlYW1fc2l6ZV9pbnB1dDIpOwoJCQlzdHJlYW1f
cHRyID0gYWxpZ25lZF9pbnN0cmVhbV9pbnB1dDI7CgkJfQoJCW1heF9xdWV1ZV9pbnB1dChhY3Rp
b25zLCAiaW5wdXQyIiwgc3RyZWFtX3B0ciwgaW5zdHJlYW1fc2l6ZV9pbnB1dDIpOwoJCUNIRUNL
X0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gaW5wdXQyICovCgkKCS8qIGNv
ZGUgZm9yIHN0cmVhbSB2ICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV92ID0gaW50ZXJmYWNlX2Fj
dGlvbnMtPmluc3RyZWFtX3NpemVfdjsKCWlmIChpbnN0cmVhbV9zaXplX3YgPiAwKSB7CgkJY29u
c3Qgdm9pZCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV92OwoJCWlm
ICh1c2VfY2FsbGJhY2sgJiYgKDEgPT0gRGVjb21wb3NpdGlvbl9jaGVja19hbGlnbmVkKGludGVy
ZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV92KSkpIHsKCQkJdm9pZCAqYWxpZ25lZF9pbnN0cmVhbV92
ID0gbWFsbG9jKGluc3RyZWFtX3NpemVfdik7CgkJCWlmIChhbGlnbmVkX2luc3RyZWFtX3YgPT0g
TlVMTCkgewoJCQkJbWF4X3JlcG9ydF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxF
X18sIF9fTElORV9fLCA1MjYsICJGYWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9y
IHN0cmVhbSAndiciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVh
bVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2Fj
dGlvbnMtPmluc3RyZWFtX3Y7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSkt
PmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX2luc3RyZWFtX3Y7CgkJCSgmY2JfZGF0
YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gaW5zdHJlYW1fc2l6ZV92
OwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9IDA7
CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX3YsIGlu
dGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV92LCBpbnN0cmVhbV9zaXplX3YpOwoJCQlzdHJlYW1f
cHRyID0gYWxpZ25lZF9pbnN0cmVhbV92OwoJCX0KCQltYXhfcXVldWVfaW5wdXQoYWN0aW9ucywg
InYiLCBzdHJlYW1fcHRyLCBpbnN0cmVhbV9zaXplX3YpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8q
IGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gdiAqLwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gb3V0cHV0
MSAqLwoJc2l6ZV90IG91dHN0cmVhbV9zaXplX291dHB1dDEgPSBpbnRlcmZhY2VfYWN0aW9ucy0+
b3V0c3RyZWFtX3NpemVfb3V0cHV0MTsKCWlmIChvdXRzdHJlYW1fc2l6ZV9vdXRwdXQxID4gMCkg
ewoJCXZvaWQgKnN0cmVhbV9wdHIgPSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dHB1
dDE7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9PSBEZWNvbXBvc2l0aW9uX2NoZWNrX2FsaWdu
ZWQoaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV9vdXRwdXQxKSkpIHsKCQkJdm9pZCAqYWxp
Z25lZF9vdXRzdHJlYW1fb3V0cHV0MSA9IG1hbGxvYyhvdXRzdHJlYW1fc2l6ZV9vdXRwdXQxKTsK
CQkJaWYgKGFsaWduZWRfb3V0c3RyZWFtX291dHB1dDEgPT0gTlVMTCkgewoJCQkJbWF4X3JlcG9y
dF9lcnJvcl9zbGljKGFjdGlvbnMtPmVycm9ycywgX19GSUxFX18sIF9fTElORV9fLCA1MjYsICJG
YWlsZWQgdG8gYWxsb2NhdGUgYWxpZ25lZCBtZW1vcnkgZm9yIHN0cmVhbSAnb3V0cHV0MSciKTsK
CQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3Vu
dF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVh
bV9vdXRwdXQxOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5hbGlnbmVk
X3B0ciA9ICh1aW50OF90KikgYWxpZ25lZF9vdXRzdHJlYW1fb3V0cHV0MTsKCQkJKCZjYl9kYXRh
LT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBvdXRzdHJlYW1fc2l6ZV9v
dXRwdXQxOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQg
ICA9IDE7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCXN0cmVhbV9wdHIgPSBhbGlnbmVkX291
dHN0cmVhbV9vdXRwdXQxOwoJCX0KCQltYXhfcXVldWVfb3V0cHV0KGFjdGlvbnMsICJvdXRwdXQx
Iiwgc3RyZWFtX3B0ciwgb3V0c3RyZWFtX3NpemVfb3V0cHV0MSk7CgkJQ0hFQ0tfRVJST1JTOwoJ
fQoJLyogZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSBvdXRwdXQxICovCgkKCS8qIGNvZGUgZm9yIHN0
cmVhbSBvdXRwdXQyICovCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfb3V0cHV0MiA9IGludGVyZmFj
ZV9hY3Rpb25zLT5vdXRzdHJlYW1fc2l6ZV9vdXRwdXQyOwoJaWYgKG91dHN0cmVhbV9zaXplX291
dHB1dDIgPiAwKSB7CgkJdm9pZCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRz
dHJlYW1fb3V0cHV0MjsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IERlY29tcG9zaXRpb25f
Y2hlY2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFtX291dHB1dDIpKSkgewoJ
CQl2b2lkICphbGlnbmVkX291dHN0cmVhbV9vdXRwdXQyID0gbWFsbG9jKG91dHN0cmVhbV9zaXpl
X291dHB1dDIpOwoJCQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1fb3V0cHV0MiA9PSBOVUxMKSB7CgkJ
CQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVfXywgX19MSU5F
X18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Igc3RyZWFtICdv
dXRwdXQyJyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2Ni
X2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZhY2VfYWN0aW9u
cy0+b3V0c3RyZWFtX291dHB1dDI7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50
XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGlnbmVkX291dHN0cmVhbV9vdXRwdXQyOwoJ
CQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9IG91dHN0
cmVhbV9zaXplX291dHB1dDI7CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSkt
PmlzX291dHB1dCAgID0gMTsKCQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJc3RyZWFtX3B0ciA9
IGFsaWduZWRfb3V0c3RyZWFtX291dHB1dDI7CgkJfQoJCW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9u
cywgIm91dHB1dDIiLCBzdHJlYW1fcHRyLCBvdXRzdHJlYW1fc2l6ZV9vdXRwdXQyKTsKCQlDSEVD
S19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIG91dHB1dDIgKi8KCQoJaWYg
KHVzZV9jYWxsYmFjayAmJiBjYl9kYXRhLT5jb3VudCA9PSAwKSB7CgkJKmNhbGxiYWNrX2RhdGEg
PSBOVUxMOwoJCSpjYWxsYmFja19mdW5jID0gTlVMTDsKCQlmcmVlKGNiX2RhdGEpOwoJfQoJcmV0
dXJuIGFjdGlvbnM7CiN1bmRlZiBDSEVDS19FUlJPUlMKfQoKdm9pZCBEZWNvbXBvc2l0aW9uKAoJ
dWludDY0X3QgdGlja3NfRGVjb21wb3NpdGlvbktlcm5lbDEsCgl1aW50NjRfdCB0aWNrc19EZWNv
bXBvc2l0aW9uS2VybmVsMiwKCXVpbnQ2NF90IGluc2NhbGFyX0RlY29tcG9zaXRpb25LZXJuZWwx
X24sCgl1aW50NjRfdCBpbnNjYWxhcl9EZWNvbXBvc2l0aW9uS2VybmVsMl9uLAoJY29uc3Qgdm9p
ZCAqaW5zdHJlYW1faW5wdXQxLAoJc2l6ZV90IGluc3RyZWFtX3NpemVfaW5wdXQxLAoJY29uc3Qg
dm9pZCAqaW5zdHJlYW1faW5wdXQyLAoJc2l6ZV90IGluc3RyZWFtX3NpemVfaW5wdXQyLAoJY29u
c3Qgdm9pZCAqaW5zdHJlYW1fdiwKCXNpemVfdCBpbnN0cmVhbV9zaXplX3YsCgl2b2lkICpvdXRz
dHJlYW1fb3V0cHV0MSwKCXNpemVfdCBvdXRzdHJlYW1fc2l6ZV9vdXRwdXQxLAoJdm9pZCAqb3V0
c3RyZWFtX291dHB1dDIsCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfb3V0cHV0MikKewoJKHZvaWQp
IHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgRGVjb21wb3NpdGlvbl9zdGF0
aWNfaW5pdCk7CglDSEVDS19OVUxMKHN0b3JlZF9tYXhmaWxlLCAiTWF4ZmlsZSB3YXMgbm90IGxv
YWRlZCIsICk7CgltYXhfcnVuX3QgKnJ1biA9IERlY29tcG9zaXRpb25fbm9uYmxvY2sodGlja3Nf
RGVjb21wb3NpdGlvbktlcm5lbDEsIHRpY2tzX0RlY29tcG9zaXRpb25LZXJuZWwyLCBpbnNjYWxh
cl9EZWNvbXBvc2l0aW9uS2VybmVsMV9uLCBpbnNjYWxhcl9EZWNvbXBvc2l0aW9uS2VybmVsMl9u
LCBpbnN0cmVhbV9pbnB1dDEsIGluc3RyZWFtX3NpemVfaW5wdXQxLCBpbnN0cmVhbV9pbnB1dDIs
IGluc3RyZWFtX3NpemVfaW5wdXQyLCBpbnN0cmVhbV92LCBpbnN0cmVhbV9zaXplX3YsIG91dHN0
cmVhbV9vdXRwdXQxLCBvdXRzdHJlYW1fc2l6ZV9vdXRwdXQxLCBvdXRzdHJlYW1fb3V0cHV0Miwg
b3V0c3RyZWFtX3NpemVfb3V0cHV0Mik7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4g
YWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKkRlY29tcG9zaXRpb25f
bm9uYmxvY2soCgl1aW50NjRfdCB0aWNrc19EZWNvbXBvc2l0aW9uS2VybmVsMSwKCXVpbnQ2NF90
IHRpY2tzX0RlY29tcG9zaXRpb25LZXJuZWwyLAoJdWludDY0X3QgaW5zY2FsYXJfRGVjb21wb3Np
dGlvbktlcm5lbDFfbiwKCXVpbnQ2NF90IGluc2NhbGFyX0RlY29tcG9zaXRpb25LZXJuZWwyX24s
Cgljb25zdCB2b2lkICppbnN0cmVhbV9pbnB1dDEsCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9pbnB1
dDEsCgljb25zdCB2b2lkICppbnN0cmVhbV9pbnB1dDIsCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9p
bnB1dDIsCgljb25zdCB2b2lkICppbnN0cmVhbV92LAoJc2l6ZV90IGluc3RyZWFtX3NpemVfdiwK
CXZvaWQgKm91dHN0cmVhbV9vdXRwdXQxLAoJc2l6ZV90IG91dHN0cmVhbV9zaXplX291dHB1dDEs
Cgl2b2lkICpvdXRzdHJlYW1fb3V0cHV0MiwKCXNpemVfdCBvdXRzdHJlYW1fc2l6ZV9vdXRwdXQy
KQp7CglEZWNvbXBvc2l0aW9uX2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFj
ZV9hY3Rpb25zLnRpY2tzX0RlY29tcG9zaXRpb25LZXJuZWwxID0gdGlja3NfRGVjb21wb3NpdGlv
bktlcm5lbDE7CglpbnRlcmZhY2VfYWN0aW9ucy50aWNrc19EZWNvbXBvc2l0aW9uS2VybmVsMiA9
IHRpY2tzX0RlY29tcG9zaXRpb25LZXJuZWwyOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zY2FsYXJf
RGVjb21wb3NpdGlvbktlcm5lbDFfbiA9IGluc2NhbGFyX0RlY29tcG9zaXRpb25LZXJuZWwxX247
CglpbnRlcmZhY2VfYWN0aW9ucy5pbnNjYWxhcl9EZWNvbXBvc2l0aW9uS2VybmVsMl9uID0gaW5z
Y2FsYXJfRGVjb21wb3NpdGlvbktlcm5lbDJfbjsKCWludGVyZmFjZV9hY3Rpb25zLmluc3RyZWFt
X2lucHV0MSA9IGluc3RyZWFtX2lucHV0MTsKCWludGVyZmFjZV9hY3Rpb25zLmluc3RyZWFtX3Np
emVfaW5wdXQxID0gaW5zdHJlYW1fc2l6ZV9pbnB1dDE7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0
cmVhbV9pbnB1dDIgPSBpbnN0cmVhbV9pbnB1dDI7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVh
bV9zaXplX2lucHV0MiA9IGluc3RyZWFtX3NpemVfaW5wdXQyOwoJaW50ZXJmYWNlX2FjdGlvbnMu
aW5zdHJlYW1fdiA9IGluc3RyZWFtX3Y7CglpbnRlcmZhY2VfYWN0aW9ucy5pbnN0cmVhbV9zaXpl
X3YgPSBpbnN0cmVhbV9zaXplX3Y7CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRzdHJlYW1fb3V0cHV0
MSA9IG91dHN0cmVhbV9vdXRwdXQxOwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c3RyZWFtX3NpemVf
b3V0cHV0MSA9IG91dHN0cmVhbV9zaXplX291dHB1dDE7CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRz
dHJlYW1fb3V0cHV0MiA9IG91dHN0cmVhbV9vdXRwdXQyOwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0
c3RyZWFtX3NpemVfb3V0cHV0MiA9IG91dHN0cmVhbV9zaXplX291dHB1dDI7Cgkodm9pZCkgcHRo
cmVhZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBEZWNvbXBvc2l0aW9uX3N0YXRpY19p
bml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9hZGVk
IiwgTlVMTCk7Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRh
ICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IERlY29tcG9zaXRpb25f
Y29udmVydF9pbnRlcm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAm
Y2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxk
IGFjdGlvbnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19T
VChhY3Rpb25zLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsK
CW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5f
bm9uYmxvY2soc3RvcmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9y
dW5fbm9uYmxvY2tfd2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9k
YXRhKTsKCX0KCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7
CglDSEVDS19FUlJPUlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlv
bnMpOwoJcmV0dXJuIHJ1bjsKfQoKdm9pZCBEZWNvbXBvc2l0aW9uX3J1bigKCW1heF9lbmdpbmVf
dCAqZW5naW5lLAoJRGVjb21wb3NpdGlvbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7
CgltYXhfcnVuX3QgKnJ1biA9IERlY29tcG9zaXRpb25fcnVuX25vbmJsb2NrKGVuZ2luZSwgaW50
ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMi
LCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpEZWNvbXBvc2l0aW9uX3J1bl9ub25i
bG9jaygKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJRGVjb21wb3NpdGlvbl9hY3Rpb25zX3QgKmlu
dGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2luZV9nZXRf
bWF4X2ZpbGUoZW5naW5lKTsgCgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQg
ICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IERlY29t
cG9zaXRpb25fY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwg
JmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCW1h
eF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9u
YmxvY2soZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9j
a193aXRoX2NiKGVuZ2luZSwgYWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9CglDSEVDS19O
VUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJl
ZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZh
bmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICog
XHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0gaW50ZXJm
YWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYWN0aW9ucyBvbiB0aGUg
Zmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JvdXAuCiAqLwp2b2lkIERlY29tcG9zaXRp
b25fcnVuX2dyb3VwKG1heF9ncm91cF90ICpncm91cCwgRGVjb21wb3NpdGlvbl9hY3Rpb25zX3Qg
KmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1biA9IERlY29tcG9zaXRpb25fcnVu
X2dyb3VwX25vbmJsb2NrKGdyb3VwLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1
biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAq
IFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBm
b3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9u
cyB0byBydW4gb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCBy
ZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNr
ZWQgd2l0aCA6Om1heF93YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMg
cHJvaGliaXRlZCB3aXRoIG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRo
ZSA6Om1heF9ydW5fZ3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5h
dGlvbi4KICoKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2lu
XSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBv
biB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9m
IGVycm9yLgogKi8KbWF4X3J1bl90ICpEZWNvbXBvc2l0aW9uX3J1bl9ncm91cF9ub25ibG9jayht
YXhfZ3JvdXBfdCAqZ3JvdXAsIERlY29tcG9zaXRpb25fYWN0aW9uc190ICppbnRlcmZhY2VfYWN0
aW9ucykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2ZpbGUoZ3Jv
dXApOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IERlY29tcG9zaXRpb25fY29udmVydF9pbnRl
cm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgTlVMTCwgTlVMTCk7CglpZihhY3Rp
b25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSBy
ZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0gbWF4
X3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVlKGFj
dGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2Vk
IHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFy
YW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBb
aW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAq
CiAqIFJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcy4gIFRo
ZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMKICogbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBl
bmdhcnJheS4KICovCnZvaWQgRGVjb21wb3NpdGlvbl9ydW5fYXJyYXkobWF4X2VuZ2FycmF5X3Qg
KmVuZ2FycmF5LCBEZWNvbXBvc2l0aW9uX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnNbXSkK
ewoJbWF4X3J1bl90ICpydW4gPSBEZWNvbXBvc2l0aW9uX3J1bl9hcnJheV9ub25ibG9jayhlbmdh
cnJheSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVu
IGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVu
IGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2Ug
J2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25z
IG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUg
bGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJy
YXkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjpt
YXhfd2FpdCBvciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3Qq
IGJlIGNhbGxlZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAq
CiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICog
XHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVu
LgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rp
b25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkRlY29tcG9zaXRp
b25fcnVuX2FycmF5X25vbmJsb2NrKG1heF9lbmdhcnJheV90ICplbmdhcnJheSwgRGVjb21wb3Np
dGlvbl9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZp
bGUgPSBtYXhfZW5nYXJyYXlfZ2V0X21heF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4
X2FjdGFycmF5X3QgKmFjdGFycmF5ID0gbWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJy
YXktPnNpemUpOwoJaWYgKGFjdGFycmF5ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlv
bnNfdCAqKmFycl9hY3Rpb25zID0gbWFsbG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9h
Y3Rpb25zX3QqKSk7Cglmb3IgKCBpID0gMCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJ
CW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBEZWNvbXBvc2l0aW9uX2NvbnZlcnRfaW50ZXJuYWwo
bWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0sIDEsIE5VTEwsIE5VTEwpOwoJCWlmIChhY3Rp
b25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rpb25zW2ldID0gYWN0aW9uczsKCQlt
YXhfc2V0X2FjdGlvbihhY3RhcnJheSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhfcnVuX3QgKnJ1biA9
IG1heF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGFjdGFycmF5KTsKCWZvciAoIGkgPSAw
IDsgaSA8IGFjdGFycmF5LT5zaXplIDsgaSsrICkgeyBtYXhfYWN0aW9uc19mcmVlKGFycl9hY3Rp
b25zW2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYWN0YXJyYXkpOwoJZnJlZShhcnJfYWN0aW9u
cyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0cyBhIHN0YXRpYy1pbnRl
cmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1pbnRlcmZhY2UgbWF4X2FjdGlvbnNf
dCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFuIGludGVybmFsIHV0aWxpdHkgZnVu
Y3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRpYyBpbnRlcmZhY2UuCiAq
CiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUgdG8gdXNlLgogKiBccGFyYW0gW2lu
XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNwZWNpZmljIGFjdGlvbnMgdG8gcnVu
LgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBhY3Rpb25zIHRvIHJ1biwgb3IgTlVM
TCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNfdCogRGVjb21wb3NpdGlvbl9jb252
ZXJ0KG1heF9maWxlX3QgKm1heGZpbGUsIERlY29tcG9zaXRpb25fYWN0aW9uc190ICppbnRlcmZh
Y2VfYWN0aW9ucykKewoJcmV0dXJuIERlY29tcG9zaXRpb25fY29udmVydF9pbnRlcm5hbChtYXhm
aWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMCwgTlVMTCwgTlVMTCk7Cn0KCiN1bmRlZiBDSEVDS19F
UlJPUlNfU1QKI3VuZGVmIENIRUNLX05VTEwKCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 63, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 98, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 9, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 10, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 1, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 15, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 16, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 28, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 72, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 46, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 47, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 27, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 55, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 54, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 56, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel1, 60, "SquashFactor", 0.0)
#endif

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 3, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 8, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 6, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 62, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 81, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 75, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 78, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 79, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 50, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 60, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 82, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 83, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 84, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 86, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 87, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 51, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 17, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 93, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 92, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 31, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 91, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 14, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 22, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 23, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 24, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 52, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 53, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 26, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 27, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 29, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 30, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 37, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DecompositionKernel2, 44, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02146d81bdfcb1710436dfce6d5c14441577a2246f6b0214060e486232d04f731f686245fb32d626c642910d")
#endif

